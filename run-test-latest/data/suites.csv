"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Sat Oct 11 01:38:20 UTC 2025","Sat Oct 11 01:39:12 UTC 2025","51976","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Reader` via **CLI**.
"
"passed","Sat Oct 11 01:52:34 UTC 2025","Sat Oct 11 01:53:20 UTC 2025","46245","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify installed PostgreSQL app info displayed on the app container via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the PostgreSQL app container.
- `Show All` button displayed on the PostgreSQL app container.
"
"passed","Sat Oct 11 02:11:58 UTC 2025","Sat Oct 11 02:13:13 UTC 2025","74887","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change User role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can change user role from `User` to `Admin`
- User after changing role from `User` to `Admin`:

- Can access organization `Settings`
- Can access organization `Billing`
"
"passed","Sat Oct 11 01:54:52 UTC 2025","Sat Oct 11 01:55:05 UTC 2025","13092","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output user data schemas is valid via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- User data sections data matching expected data format.
"
"passed","Sat Oct 11 03:06:56 UTC 2025","Sat Oct 11 03:07:54 UTC 2025","57503","CLI Tests","CLI Storage","TestCLIStorage","","","Admin remove text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can remove `txt` file via **CLI**.
"
"passed","Sat Oct 11 03:49:44 UTC 2025","Sat Oct 11 03:51:35 UTC 2025","111264","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify Manager can purchase organization credits with predefined value","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role.

### Verify that:

- `Manager` can purchase credits using predefined value(10, 100, 1000).
"
"passed","Sat Oct 11 02:54:28 UTC 2025","Sat Oct 11 02:55:36 UTC 2025","67814","CLI Tests","CLI Storage","TestCLIStorage","","","Admin rename folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create new folder via **CLI**.

### Verify that:

- User can rename folder via **CLI**.
"
"passed","Sat Oct 11 02:26:17 UTC 2025","Sat Oct 11 02:28:50 UTC 2025","152576","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Writer to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can promote `Writer` to `Manager`.
"
"passed","Sat Oct 11 03:42:55 UTC 2025","Sat Oct 11 03:43:46 UTC 2025","51678","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Manager can access organization settings","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that `Manager`:

- Can access organization Settings.
"
"passed","Sat Oct 11 02:43:35 UTC 2025","Sat Oct 11 02:45:40 UTC 2025","125230","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Writer cannot change member roles","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Writer` **cannot** change member roles.
"
"passed","Sat Oct 11 02:35:05 UTC 2025","Sat Oct 11 02:36:23 UTC 2025","77714","UI Tests","UI Files","TestUIFiles","","","User download bin file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Upload `bin` file.

### Verify that:

- User can download `bin` file via UI.
- Downloaded `bin` file md5 hash matches expected file.
"
"passed","Sat Oct 11 02:51:55 UTC 2025","Sat Oct 11 02:52:41 UTC 2025","46442","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `User` role via **CLI**.

### Verify that:

- `Admin` can remove `User` from organization via **CLI**.
"
"passed","Sat Oct 11 03:53:36 UTC 2025","Sat Oct 11 03:53:49 UTC 2025","13632","UI Tests","UI Login","TestUILogin","","","New user successful login","
### Verify that:

- User can login with valid credentials.
"
"passed","Sat Oct 11 02:45:42 UTC 2025","Sat Oct 11 02:45:49 UTC 2025","6665","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify User can reach Service Deployment app Details page from Installed Apps page","
### Pre-conditions:
- Service Deployment app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `Service Deployment app Details` page displayed.
"
"passed","Sat Oct 11 03:13:16 UTC 2025","Sat Oct 11 03:14:30 UTC 2025","73320","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin cannot remove himself from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` **cannot** remove himself from organization.
"
"passed","Sat Oct 11 01:33:17 UTC 2025","Sat Oct 11 01:34:50 UTC 2025","93575","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Writer` via **CLI**.
"
"passed","Sat Oct 11 02:19:06 UTC 2025","Sat Oct 11 02:20:39 UTC 2025","92739","UI Tests","UI Files","TestUIFiles","","","Verify Manager can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` can create new folder.
"
"passed","Sat Oct 11 01:49:14 UTC 2025","Sat Oct 11 01:52:01 UTC 2025","166888","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Install PostgreSQL app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Select the Preset `cpu-medium`
- Set PGbouncer.replicas to `1`
- Set Postgres Configuration.Instance replicas to `1`
- Click on Database Users `Add Entry`
- Enter Database `user name`
- Enter Database `name`
- Select PG Bouncer.Resource Preset `cpu-medium`

### Verify that:

- User can install `PostgreSQL` app via **UI**.
"
"passed","Sat Oct 11 01:34:05 UTC 2025","Sat Oct 11 01:35:53 UTC 2025","107176","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote Reader to `Writer`.
"
"passed","Sat Oct 11 02:31:05 UTC 2025","Sat Oct 11 02:32:21 UTC 2025","76641","UI Tests","UI Files","TestUIFiles","","","User upload txt file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can upload `txt` file via UI.
"
"passed","Sat Oct 11 03:36:30 UTC 2025","Sat Oct 11 03:37:37 UTC 2025","66934","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create first disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create disk via **CLI**.
"
"passed","Sat Oct 11 01:36:21 UTC 2025","Sat Oct 11 01:37:43 UTC 2025","82091","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Admin` via **CLI**.
"
"passed","Sat Oct 11 01:55:33 UTC 2025","Sat Oct 11 01:58:19 UTC 2025","165390","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify PostgreSQL client installation in Shell app via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Install Shell app.
- Open Shell app.
- Install `postgresql-client` in Shell app.

### Verify that:

- `postgresql-client` packet is installed successfully.
"
"passed","Sat Oct 11 02:45:48 UTC 2025","Sat Oct 11 02:48:01 UTC 2025","132212","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Reader cannot change member roles","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Reader` **cannot** change member roles.
"
"passed","Sat Oct 11 03:47:57 UTC 2025","Sat Oct 11 03:48:52 UTC 2025","55814","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite not registered user to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User **cannot** invite to project another user which is **not registered**.
"
"passed","Sat Oct 11 03:46:02 UTC 2025","Sat Oct 11 03:46:54 UTC 2025","51190","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Admin can access organization billing","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that `Admin`:

- Can access organization Billing.
"
"passed","Sat Oct 11 03:32:46 UTC 2025","Sat Oct 11 03:33:35 UTC 2025","48933","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create First Project from main page via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create first project in organization from **the main page**.
"
"skipped","Sat Oct 11 01:45:27 UTC 2025","Sat Oct 11 01:45:27 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify event list of installed DeepSeek app via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET '/events' endpoint.

### Verify that:

- App events list contains states queued, progressing and healthy.
"
"passed","Sat Oct 11 01:45:32 UTC 2025","Sat Oct 11 01:47:38 UTC 2025","125888","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Writer to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can promote `Writer` to `Admin`.
"
"passed","Sat Oct 11 02:15:00 UTC 2025","Sat Oct 11 02:16:11 UTC 2025","71061","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Manager role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:
- `Admin` can change user role from `Manager` to `Admin`
- User after changing role from `Manager` to `Admin`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Sat Oct 11 03:47:14 UTC 2025","Sat Oct 11 03:47:47 UTC 2025","33156","CLI Tests","CLI Login","TestCLILogin","","","User with organization logs in with auth token via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create organization via **API**.

### Verify that:

- User can login with Bearer auth token via **CLI**.
- Login output in CLI valid `organization` and no `project` info.
"
"passed","Sat Oct 11 02:39:32 UTC 2025","Sat Oct 11 02:40:49 UTC 2025","77556","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Admin from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can remove another `Admin` from project via **CLI**.
"
"passed","Sat Oct 11 03:51:54 UTC 2025","Sat Oct 11 03:53:06 UTC 2025","71766","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin remove secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create first secret via **CLI**.
- Create second secret via **CLI**.

### Verify that:

- User can remove second secret via **CLI**.
"
"skipped","Sat Oct 11 01:45:37 UTC 2025","Sat Oct 11 01:45:37 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on Shell App container.

### Verify that:

- DeepSeek app displayed in Installed Apps.
"
"passed","Sat Oct 11 03:04:42 UTC 2025","Sat Oct 11 03:05:21 UTC 2025","38679","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User removes organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create second organization via **CLI**.

### Verify that:

- User can remove organization via **CLI**.
"
"passed","Sat Oct 11 02:33:15 UTC 2025","Sat Oct 11 02:36:25 UTC 2025","189813","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot promote Writer to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` **cannot** promote `Writer` to `Admin`.
"
"passed","Sat Oct 11 03:24:00 UTC 2025","Sat Oct 11 03:25:52 UTC 2025","111651","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite user with organization to organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup second user.
- Pass onboarding for second user and create organization via UI.

### Verify that:

- User can invite to organization another user that already has organization.'
"
"passed","Sat Oct 11 03:47:01 UTC 2025","Sat Oct 11 03:47:07 UTC 2025","6247","CLI Tests","CLI Login","TestCLILogin","","","User without organization logs in with auth token via CLI","
- Login with valid credentials **via UI**.
- Get Bearer auth token from Playwright local storage.

### Verify that:

- User can login with Bearer auth token **via CLI**.
- Login output in CLI doesn't contain `organization` and `project`.
"
"passed","Sat Oct 11 03:14:36 UTC 2025","Sat Oct 11 03:16:27 UTC 2025","111014","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager can remove User from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` can remove `User` from organization.
"
"passed","Sat Oct 11 01:49:46 UTC 2025","Sat Oct 11 01:50:40 UTC 2025","54825","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Manager` via **CLI**.
"
"passed","Sat Oct 11 02:13:20 UTC 2025","Sat Oct 11 02:14:52 UTC 2025","92083","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Manager role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:
- `Admin` can change user role from `Manager` to `User`
- User after changing role from `Manager` to `User`:

- **Cannot** access organization `Settings`
- **Cannot** access organization `Billing`
"
"passed","Sat Oct 11 02:54:25 UTC 2025","Sat Oct 11 02:55:21 UTC 2025","56117","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes Admin from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Admin` role via **CLI**.

### Verify that:

- `Admin` can remove `Admin` from organization via **CLI**.
"
"passed","Sat Oct 11 03:15:27 UTC 2025","Sat Oct 11 03:16:28 UTC 2025","60418","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Switch between organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create second organization via UI.

### Verify that:

- User can switch between organizations.
"
"skipped","Sat Oct 11 01:45:32 UTC 2025","Sat Oct 11 01:45:32 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can reach DeepSeek app Details page from Installed Apps page","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `DeepSeek app Details` page displayed.
"
"passed","Sat Oct 11 03:26:48 UTC 2025","Sat Oct 11 03:27:35 UTC 2025","46841","UI Tests","UI Disks","TestUIDisks","","","Create First Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can create first Disk after project created.
"
"passed","Sat Oct 11 01:52:03 UTC 2025","Sat Oct 11 01:53:16 UTC 2025","73510","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Reader` to `Writer` via **CLI**.
"
"passed","Sat Oct 11 03:16:35 UTC 2025","Sat Oct 11 03:18:21 UTC 2025","105654","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager can remove another Manager from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` can remove another `Manager` from organization.
"
"passed","Sat Oct 11 03:35:55 UTC 2025","Sat Oct 11 03:36:23 UTC 2025","27323","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create disk with no project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create disk via CLI if there is no project created yet.
"
"passed","Sat Oct 11 02:14:15 UTC 2025","Sat Oct 11 02:16:28 UTC 2025","132881","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot promote Reader to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` **cannot** promote `Reader` to `Admins`.
"
"passed","Sat Oct 11 01:46:25 UTC 2025","Sat Oct 11 01:46:43 UTC 2025","17738","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Import DeepSeek app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Import DeepSeek app config via UI.

### Verify that:

- Install required data is the same as in imported config.
"
"passed","Sat Oct 11 03:40:03 UTC 2025","Sat Oct 11 03:40:46 UTC 2025","43654","CLI Tests","CLI Disks","TestCLIDisks","","","Admin get disk by ID via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can get disk info by disk ID via **CLI**.
"
"passed","Sat Oct 11 02:59:11 UTC 2025","Sat Oct 11 03:00:15 UTC 2025","64596","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes Admin from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove `Admin` from organization via **CLI**.
"
"passed","Sat Oct 11 03:15:56 UTC 2025","Sat Oct 11 03:18:43 UTC 2025","167493","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager cannot remove Admin from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Admin` role.

### Verify that:

- `Manager` **cannot** remove `Admin` from project.
"
"passed","Sat Oct 11 02:57:58 UTC 2025","Sat Oct 11 02:59:03 UTC 2025","64986","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes Manager from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Manager` from organization via **CLI**.
"
"passed","Sat Oct 11 02:04:47 UTC 2025","Sat Oct 11 02:05:45 UTC 2025","58444","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Manager` to `Admin` via **CLI**.
"
"passed","Sat Oct 11 03:09:05 UTC 2025","Sat Oct 11 03:09:47 UTC 2025","41707","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User verifies admin get-org-users output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Invite `second user` to organization via **CLI**.
- Run `apolo admin get-org-users` command via **CLI**.

### Verify that:

- Organization members are listed with valid data in command output.
"
"passed","Sat Oct 11 02:09:37 UTC 2025","Sat Oct 11 02:09:42 UTC 2025","5003","E2E Tests","Shell App","TestE2EShellApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"failed","Sat Oct 11 03:39:08 UTC 2025","Sat Oct 11 03:40:17 UTC 2025","68518","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create second project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create second project in organization.
"
"passed","Sat Oct 11 02:32:34 UTC 2025","Sat Oct 11 02:34:28 UTC 2025","113263","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Admin role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `Admin` to `Manager`.
"
"passed","Sat Oct 11 03:42:50 UTC 2025","Sat Oct 11 03:43:25 UTC 2025","34874","UI Tests","UI Secrets","TestUISecrets","","","Create First Secret without project via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User **cannot** create first Secret if **no project created** yet.
"
"failed","Sat Oct 11 02:00:32 UTC 2025","Sat Oct 11 02:01:31 UTC 2025","59031","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Import PostgreSQL app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Import PostgreSQL app config via UI.

### Verify that:

- Install required data is the same as in imported config.
"
"skipped","Sat Oct 11 01:45:44 UTC 2025","Sat Oct 11 01:45:44 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output contains required endpoints via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Http OpenAI Compatible Chat API
- Https OpenAI Compatible Chat API
- Http OpenAI Compatible Embeddings API
- Https OpenAI Compatible Embeddings API
"
"passed","Sat Oct 11 02:53:43 UTC 2025","Sat Oct 11 02:56:01 UTC 2025","138718","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove another Admin from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can remove another `Admin` from project.
"
"passed","Sat Oct 11 01:41:24 UTC 2025","Sat Oct 11 01:42:45 UTC 2025","81175","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Admin` via **CLI**.
"
"skipped","Sat Oct 11 01:45:55 UTC 2025","Sat Oct 11 01:45:55 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy GET external Chat API returns 404","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET `external` OpenAI Compatible Chat API `hostname` link.

### Verify that:

- API response status is 404.
"
"passed","Sat Oct 11 02:26:29 UTC 2025","Sat Oct 11 02:28:25 UTC 2025","116518","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager can change Manager role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` can change user role from `Manager` to `User`.
- User after changing role from `Manager` to `User`:

- **Cannot** access organization `Settings`.
- **Cannot** access organization `Billing`.
"
"passed","Sat Oct 11 03:34:18 UTC 2025","Sat Oct 11 03:35:16 UTC 2025","57438","UI Tests","UI Disks","TestUIDisks","","","Delete Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create new Disk.

### Verify that:

- User can delete Disk.
"
"passed","Sat Oct 11 02:47:35 UTC 2025","Sat Oct 11 02:47:41 UTC 2025","6871","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify Service Deployment app details info via UI","
### Pre-conditions:
- Service DEployment app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- Service Deployment app Details info is valid.
"
"passed","Sat Oct 11 03:28:04 UTC 2025","Sat Oct 11 03:29:10 UTC 2025","66596","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User creates a second project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create first project via **CLI**.

### Verify that:

- User can create second project via **CLI**.
"
"passed","Sat Oct 11 03:21:14 UTC 2025","Sat Oct 11 03:22:28 UTC 2025","73349","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite registered user without organization to organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.

### Verify that:

- User can invite to organization another user that is registered but **doesn't have an organization**.
"
"passed","Sat Oct 11 02:48:04 UTC 2025","Sat Oct 11 02:49:34 UTC 2025","89707","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Writer removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Writer` **cannot** remove members from project via **CLI**.
"
"passed","Sat Oct 11 02:09:55 UTC 2025","Sat Oct 11 02:10:09 UTC 2025","13579","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output API schemas is valid via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- API sections data matching expected data format.
"
"passed","Sat Oct 11 02:23:42 UTC 2025","Sat Oct 11 02:24:28 UTC 2025","46607","UI Tests","UI Files","TestUIFiles","","","User make single click on Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create new folder.
- Single click on folder.

### Verify that:

- Folder info section appears.
- Folder action bar appears.
"
"passed","Sat Oct 11 03:50:43 UTC 2025","Sat Oct 11 03:51:43 UTC 2025","60080","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create second secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create first secret via **CLI**.

### Verify that:

- User can create second secret via **CLI**.
"
"passed","Sat Oct 11 03:01:33 UTC 2025","Sat Oct 11 03:02:48 UTC 2025","75564","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","User removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `User` role via **CLI**.
- Add `third user` to organization with `User` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `User` **cannot** remove members from organization via **CLI**.
"
"passed","Sat Oct 11 03:29:48 UTC 2025","Sat Oct 11 03:31:59 UTC 2025","130904","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Writer to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` can invite `third user` as `Writer` to a project.
"
"passed","Sat Oct 11 02:57:20 UTC 2025","Sat Oct 11 02:59:55 UTC 2025","155067","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove Reader from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can remove `Reader` from project.
"
"passed","Sat Oct 11 02:07:33 UTC 2025","Sat Oct 11 02:08:25 UTC 2025","51516","E2E Tests","Shell App","TestE2EShellApp","","","Verify installed Shell app info displayed on the app container via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the Shell app container.
- `Show All` button displayed on the Shell app container.
"
"passed","Sat Oct 11 01:58:09 UTC 2025","Sat Oct 11 02:00:09 UTC 2025","120488","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Manager`.
"
"passed","Sat Oct 11 01:54:40 UTC 2025","Sat Oct 11 01:54:49 UTC 2025","9132","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output contains required users data via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Postgres User data
- Postgres Admin data
"
"passed","Sat Oct 11 03:09:21 UTC 2025","Sat Oct 11 03:11:52 UTC 2025","150643","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove another Manager from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Manager` role.

### Verify that:

- `Manager` can remove another `Manager` from project.
"
"passed","Sat Oct 11 03:43:33 UTC 2025","Sat Oct 11 03:45:04 UTC 2025","91145","UI Tests","UI Secrets","TestUISecrets","","","Create First Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can create first Secret after project created.
"
"passed","Sat Oct 11 02:46:40 UTC 2025","Sat Oct 11 02:47:32 UTC 2025","52646","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- Service Deployment app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on Service Deployment App container.

### Verify that:

- Service Deployment app displayed in Installed Apps.
"
"passed","Sat Oct 11 02:09:28 UTC 2025","Sat Oct 11 02:09:35 UTC 2025","6961","E2E Tests","Shell App","TestE2EShellApp","","","Verify Installed apps details info via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- Shell app Details info is valid.
"
"passed","Sat Oct 11 02:45:34 UTC 2025","Sat Oct 11 02:45:40 UTC 2025","5836","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify installed Service Deployment app listed in Installed apps via UI","
### Pre-conditions:
- Service Deployment app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- Service Deployment app displayed in Installed Apps.
"
"passed","Sat Oct 11 02:45:41 UTC 2025","Sat Oct 11 02:47:04 UTC 2025","82953","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Admin from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` cannot remove `Admin` from project via **CLI**.
"
"passed","Sat Oct 11 03:30:33 UTC 2025","Sat Oct 11 03:31:21 UTC 2025","48015","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Add organization member to project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can add organization member to project via **CLI**.
"
"passed","Sat Oct 11 02:08:39 UTC 2025","Sat Oct 11 02:10:05 UTC 2025","86563","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Reader change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Reader` **cannot** change member project roles via **CLI**.
"
"passed","Sat Oct 11 01:56:37 UTC 2025","Sat Oct 11 01:58:01 UTC 2025","84157","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Writer`.
"
"passed","Sat Oct 11 03:42:11 UTC 2025","Sat Oct 11 03:43:37 UTC 2025","85134","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite member of organization to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization.

### Verify that:

- User can invite member of organization to project.
"
"passed","Sat Oct 11 02:20:50 UTC 2025","Sat Oct 11 02:23:05 UTC 2025","134611","UI Tests","UI Files","TestUIFiles","","","Verify Admin can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can create new folder
"
"passed","Sat Oct 11 01:54:33 UTC 2025","Sat Oct 11 01:54:38 UTC 2025","5158","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"failed","Sat Oct 11 02:12:56 UTC 2025","Sat Oct 11 02:13:49 UTC 2025","52961","E2E Tests","Shell App","TestE2EShellApp","","","Import Shell app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Import Shell app config via UI.

### Verify that:

- Install required data is the same as in imported config.
"
"passed","Sat Oct 11 03:38:56 UTC 2025","Sat Oct 11 03:41:22 UTC 2025","146030","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager cannot invite Admin to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` **cannot** invite `third user` as `Admin` to a project.
"
"passed","Sat Oct 11 03:28:13 UTC 2025","Sat Oct 11 03:29:32 UTC 2025","79338","UI Tests","UI Disks","TestUIDisks","","","Create Second Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create new Disk.

### Verify that:

- User can create second Disk.
"
"passed","Sat Oct 11 03:51:26 UTC 2025","Sat Oct 11 03:51:44 UTC 2025","18746","UI Tests","UI Signup","TestUISignup","","","New user successful signup","
### Verify that:

- New user can signup via UI.
"
"passed","Sat Oct 11 02:04:03 UTC 2025","Sat Oct 11 02:07:08 UTC 2025","184573","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Reader to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can promote `Reader` to `Writer`.
"
"passed","Sat Oct 11 01:45:47 UTC 2025","Sat Oct 11 01:46:40 UTC 2025","53228","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Admin` via **CLI**.
"
"passed","Sat Oct 11 02:47:44 UTC 2025","Sat Oct 11 02:47:49 UTC 2025","4907","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify Installed app details info via API","
### Pre-conditions:
- Service Deployment app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"passed","Sat Oct 11 02:29:04 UTC 2025","Sat Oct 11 02:30:25 UTC 2025","80537","UI Tests","UI Files","TestUIFiles","","","User upload bin file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can upload `bin` file via UI.
"
"passed","Sat Oct 11 03:30:11 UTC 2025","Sat Oct 11 03:31:56 UTC 2025","105333","UI Tests","UI Disks","TestUIDisks","","","Search Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create new Disk.
- Create second Disk.

### Verify that:

- User can search for Disk via UI with the `Search` field.
"
"passed","Sat Oct 11 03:44:59 UTC 2025","Sat Oct 11 03:45:53 UTC 2025","54221","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Admin can access organization settings","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that `Admin`:

- Can access organization Settings.
"
"passed","Sat Oct 11 03:26:55 UTC 2025","Sat Oct 11 03:29:11 UTC 2025","135818","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Reader to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` can invite `third user` as `Reader` to a project.
"
"passed","Sat Oct 11 01:52:04 UTC 2025","Sat Oct 11 01:52:09 UTC 2025","4962","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify event list of installed PostgreSQL app via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- GET '/events' endpoint.

### Verify that:

- App events list contains states queued, progressing and healthy.
"
"passed","Sat Oct 11 03:45:41 UTC 2025","Sat Oct 11 03:47:25 UTC 2025","104151","UI Tests","UI Secrets","TestUISecrets","","","Create Second Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create Secret.

### Verify that:

- User can create second Secret.
"
"passed","Sat Oct 11 02:38:08 UTC 2025","Sat Oct 11 02:39:23 UTC 2025","74856","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Manager from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can remove `Manager` from project via **CLI**.
"
"passed","Sat Oct 11 01:57:41 UTC 2025","Sat Oct 11 01:58:49 UTC 2025","67794","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Writer` to `Manager` via **CLI**.
"
"passed","Sat Oct 11 03:32:36 UTC 2025","Sat Oct 11 03:33:41 UTC 2025","65061","UI Tests","UI Disks","TestUIDisks","","","Open Disk info view by click on disk button","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create new Disk.

### Verify that:

- After click on disk button Disk info view appears.
"
"passed","Sat Oct 11 02:24:08 UTC 2025","Sat Oct 11 02:26:21 UTC 2025","132833","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change User role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `User` to `Admin`.
"
"passed","Sat Oct 11 02:35:57 UTC 2025","Sat Oct 11 02:36:40 UTC 2025","43329","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can remove `Reader` from project via **CLI**.
"
"passed","Sat Oct 11 02:05:53 UTC 2025","Sat Oct 11 02:06:50 UTC 2025","56762","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Admin to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Admin` to `Reader` via **CLI**.
"
"passed","Sat Oct 11 02:52:18 UTC 2025","Sat Oct 11 02:52:54 UTC 2025","36572","CLI Tests","CLI Storage","TestCLIStorage","","","Admin create folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can create folder via **CLI**.
"
"passed","Sat Oct 11 03:29:19 UTC 2025","Sat Oct 11 03:29:55 UTC 2025","35681","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Switch between projects via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create first project via **CLI**.
- Create second project via **CLI**.

### Verify that:

- User can switch between projects via **CLI**.
"
"passed","Sat Oct 11 03:48:41 UTC 2025","Sat Oct 11 03:49:37 UTC 2025","55710","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify User cannot purchase credits via top pane","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role.

### Verify that:

- `User` **cannot** purchase credits via top pane.
"
"skipped","Sat Oct 11 01:45:57 UTC 2025","Sat Oct 11 01:45:57 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy GET external Chat API /docs returns Swagger page","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET `external` OpenAI Compatible Chat API `{hostname}/docs link`.

### Verify that:

- Swagger page is returned.
"
"passed","Sat Oct 11 02:51:46 UTC 2025","Sat Oct 11 02:52:09 UTC 2025","22570","CLI Tests","CLI Storage","TestCLIStorage","","","Admin create folder without project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create folder if there is **no project created** yet via **CLI**.
"
"passed","Sat Oct 11 02:38:32 UTC 2025","Sat Oct 11 02:39:41 UTC 2025","68827","UI Tests","UI Files","TestUIFiles","","","User rename File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Upload txt file.

### Verify that:

- User can rename a file with `Rename` button from File action bar.
"
"passed","Sat Oct 11 03:25:49 UTC 2025","Sat Oct 11 03:26:33 UTC 2025","44448","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User creates a first project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create first project via **CLI**.
"
"passed","Sat Oct 11 01:52:11 UTC 2025","Sat Oct 11 01:52:22 UTC 2025","11279","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify installed PostgreSQL app listed in Installed apps via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- PostgreSQL app displayed in Installed Apps.
"
"passed","Sat Oct 11 02:33:05 UTC 2025","Sat Oct 11 02:34:26 UTC 2025","80778","UI Tests","UI Files","TestUIFiles","","","User make single click on File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Upload `txt` file.
- Single click on file.

### Verify that:
- File info section appears.
- File action bar appears.
"
"passed","Sat Oct 11 01:51:18 UTC 2025","Sat Oct 11 01:51:55 UTC 2025","37242","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin demote himself to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- `Admin` **cannot** demote himself via **CLI**.
"
"passed","Sat Oct 11 02:48:08 UTC 2025","Sat Oct 11 02:49:59 UTC 2025","110883","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Reader from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can remove `Reader` from `project`.
"
"passed","Sat Oct 11 01:55:20 UTC 2025","Sat Oct 11 01:55:31 UTC 2025","10243","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output endpoints schema via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that:

- API endpoints data matching expected json schema.
"
"passed","Sat Oct 11 01:46:09 UTC 2025","Sat Oct 11 01:46:22 UTC 2025","13500","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Export DeepSeek app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create Secret with token for HuggingFace token via API.
- Select Secret.
- Select HuggingFace model.
- Enter app Display name.
- Click `Export config` button.

### Verify that:

- Config downloaded as `yaml` file matches expected schema.
- Exported config contains valid data.
"
"passed","Sat Oct 11 02:48:11 UTC 2025","Sat Oct 11 02:48:52 UTC 2025","40884","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- Shell app uninstalled.
"
"passed","Sat Oct 11 03:18:27 UTC 2025","Sat Oct 11 03:20:20 UTC 2025","112485","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager cannot remove Admin from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** remove another `Admin` from organization.
"
"passed","Sat Oct 11 03:02:58 UTC 2025","Sat Oct 11 03:03:33 UTC 2025","34281","CLI Tests","CLI Storage","TestCLIStorage","","","Admin download text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can download `txt` file via **CLI**.
- downloaded `txt` file md5 hash matches expected file.
"
"passed","Sat Oct 11 02:50:06 UTC 2025","Sat Oct 11 02:51:56 UTC 2025","110289","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Writer from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can remove `Writer` from project.
"
"passed","Sat Oct 11 02:56:33 UTC 2025","Sat Oct 11 02:57:50 UTC 2025","77324","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `User` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `User` from organization via **CLI**.
"
"passed","Sat Oct 11 02:19:19 UTC 2025","Sat Oct 11 02:20:40 UTC 2025","80960","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin cannot demote himself to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` **cannot** demote himself to `User`.
"
"passed","Sat Oct 11 02:44:36 UTC 2025","Sat Oct 11 02:45:33 UTC 2025","56360","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Manager from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove another `Manager` from project via **CLI**.
"
"passed","Sat Oct 11 02:37:18 UTC 2025","Sat Oct 11 02:38:01 UTC 2025","43205","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Writer from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can remove `Writer` from project via **CLI**.
"
"passed","Sat Oct 11 03:05:32 UTC 2025","Sat Oct 11 03:06:12 UTC 2025","39885","CLI Tests","CLI Storage","TestCLIStorage","","","Admin rename text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can rename `txt` file via **CLI**.
"
"passed","Sat Oct 11 02:58:11 UTC 2025","Sat Oct 11 02:59:16 UTC 2025","64885","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can upload `txt` file via **CLI**.
"
"passed","Sat Oct 11 02:10:24 UTC 2025","Sat Oct 11 02:10:30 UTC 2025","5269","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output endpoints schema via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that:

- API endpoints data matching expected json schema.
"
"passed","Sat Oct 11 02:10:11 UTC 2025","Sat Oct 11 02:10:22 UTC 2025","10311","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output contains required endpoints via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that `output` API response contains required endpoints:

- Http internal API
- Https external API
"
"passed","Sat Oct 11 03:49:03 UTC 2025","Sat Oct 11 03:49:25 UTC 2025","21814","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create secret with no project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create secret if there is no project created via **CLI**.
"
"passed","Sat Oct 11 01:55:08 UTC 2025","Sat Oct 11 01:55:18 UTC 2025","10401","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output contains required endpoints via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that `output` API response contains required endpoints:

- Postgres User data
- Postgres Admin data
"
"passed","Sat Oct 11 01:42:52 UTC 2025","Sat Oct 11 01:44:13 UTC 2025","81126","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Reader` via **CLI**.
"
"passed","Sat Oct 11 02:25:57 UTC 2025","Sat Oct 11 02:26:55 UTC 2025","58804","UI Tests","UI Files","TestUIFiles","","","User rename Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create new folder.

### Verify that:

- User can rename a folder with `Rename` button from File action bar.
"
"passed","Sat Oct 11 02:59:25 UTC 2025","Sat Oct 11 03:00:01 UTC 2025","35775","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload bin file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can upload `bin` file via **CLI**.
"
"passed","Sat Oct 11 03:20:23 UTC 2025","Sat Oct 11 03:22:43 UTC 2025","139848","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Writer cannot remove members from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Writer` **cannot** remove members from project.
"
"passed","Sat Oct 11 02:10:43 UTC 2025","Sat Oct 11 02:11:51 UTC 2025","67995","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change User role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can change user role from `User` to `Manager`
- User after changing role from `User` to `Manager`:

- Can access organization `Settings`
- Can access organization `Billing`
"
"passed","Sat Oct 11 02:41:27 UTC 2025","Sat Oct 11 02:42:04 UTC 2025","37137","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes himself from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- `Admin` **cannot** remove himself from project via **CLI**.
"
"passed","Sat Oct 11 03:23:19 UTC 2025","Sat Oct 11 03:25:16 UTC 2025","116784","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Writer can modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Writer` has access to modify Files.
"
"passed","Sat Oct 11 03:03:17 UTC 2025","Sat Oct 11 03:05:29 UTC 2025","132159","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove Writer from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can remove `Writer` from project.
"
"passed","Sat Oct 11 03:06:16 UTC 2025","Sat Oct 11 03:06:48 UTC 2025","32645","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User switch organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create second organization via **CLI**.

### Verify that:

- User can switch between organizations via **CLI**.
"
"passed","Sat Oct 11 03:43:54 UTC 2025","Sat Oct 11 03:44:52 UTC 2025","58087","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Manager can access organization billing","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that `Manager`:

- Can access organization Billing.
"
"passed","Sat Oct 11 02:27:32 UTC 2025","Sat Oct 11 02:28:24 UTC 2025","52119","UI Tests","UI Files","TestUIFiles","","","User delete Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create new folder.

### Verify that:

- User can delete a folder with `Delete` button from File action bar.
"
"passed","Sat Oct 11 01:53:23 UTC 2025","Sat Oct 11 01:54:15 UTC 2025","52482","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on PostgreSQL App container.

### Verify that:

- PostgreSQL app displayed in Installed Apps.
"
"passed","Sat Oct 11 02:28:33 UTC 2025","Sat Oct 11 02:30:22 UTC 2025","109689","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Manager role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` cannot change user role from `Manager` to `Admin`.
"
"skipped","Sat Oct 11 01:45:59 UTC 2025","Sat Oct 11 01:45:59 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy GET external Chat API /v1/models returns valid data","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET `external` OpenAI Compatible Chat API `{hostname}/v1/models`.

### Verify that:

- API response contains valid data.
"
"passed","Sat Oct 11 03:22:50 UTC 2025","Sat Oct 11 03:25:10 UTC 2025","139654","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Reader cannot remove members from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Reader` **cannot** remove members from project.
"
"passed","Sat Oct 11 02:09:45 UTC 2025","Sat Oct 11 02:09:53 UTC 2025","7841","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output contains required endpoints via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Http internal API
- Https external API
"
"passed","Sat Oct 11 03:51:43 UTC 2025","Sat Oct 11 03:53:03 UTC 2025","80326","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify Admin can purchase organization credits with custom amount","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- Admin can purchase credits by input custom amount.
"
"passed","Sat Oct 11 02:11:57 UTC 2025","Sat Oct 11 02:12:53 UTC 2025","56585","E2E Tests","Shell App","TestE2EShellApp","","","Export Shell app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Select `cpu-medium` Resource Preset.
- Set app Display name.
- Click `Export config` button.

### Verify that:

- Config downloaded as `yaml` file matches expected schema.
- Exported config contains valid data.
"
"passed","Sat Oct 11 02:45:26 UTC 2025","Sat Oct 11 02:45:31 UTC 2025","5099","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify event list of installed Shell app via API","
### Pre-conditions:
- Service Deployment app installed.

### Steps:
- Login with valid credentials.
- GET '/events' endpoint.

### Verify that:

- App events list contains states queued, progressing and healthy.
"
"passed","Sat Oct 11 02:17:02 UTC 2025","Sat Oct 11 02:18:55 UTC 2025","113251","UI Tests","UI Files","TestUIFiles","","","Verify Writer can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Writer` can create new folder.
"
"failed","Sat Oct 11 01:33:30 UTC 2025","Sat Oct 11 01:45:27 UTC 2025","716403","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Install DeepSeek app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can install `DeepSeek` app via **UI**.
"
"passed","Sat Oct 11 03:00:25 UTC 2025","Sat Oct 11 03:01:24 UTC 2025","58874","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes himself from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove `himself` from organization via **CLI**.
"
"passed","Sat Oct 11 03:11:45 UTC 2025","Sat Oct 11 03:12:34 UTC 2025","49100","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Create Second Organization via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create second organization.
"
"passed","Sat Oct 11 02:43:44 UTC 2025","Sat Oct 11 02:44:29 UTC 2025","45283","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Writer from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Writer` from project via **CLI**.
"
"passed","Sat Oct 11 01:58:21 UTC 2025","Sat Oct 11 01:58:40 UTC 2025","19307","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify PostgreSQL client connection in Shell app via UI","
### Pre-conditions:
- PostgreSQL app installed.
- Shell app installed.

### Steps:
- Login with valid credentials.
- Get Postgres Users.Postgres User Credentials[0].Uri from `output` API.
- Open Shell app.
- Run `psql {URI}` command in Shell app.

### Verify that:

- psql connection is successful.
"
"passed","Sat Oct 11 03:49:02 UTC 2025","Sat Oct 11 03:50:49 UTC 2025","106885","UI Tests","UI Secrets","TestUISecrets","","","Delete Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create Secret.

### Verify that:

- User can delete Secret.
"
"passed","Sat Oct 11 02:52:03 UTC 2025","Sat Oct 11 02:53:35 UTC 2025","92659","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Manager from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can remove `Manager` from project.
"
"passed","Sat Oct 11 03:26:01 UTC 2025","Sat Oct 11 03:26:41 UTC 2025","40242","UI Tests","UI Disks","TestUIDisks","","","Create First Disk without project via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User **cannot** create first Disk if **no project created** yet.
"
"passed","Sat Oct 11 01:38:29 UTC 2025","Sat Oct 11 01:40:30 UTC 2025","121159","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote `Reader` to `Admin`.
"
"passed","Sat Oct 11 03:49:33 UTC 2025","Sat Oct 11 03:50:05 UTC 2025","32585","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create first secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can create first secret via **CLI**.
"
"passed","Sat Oct 11 01:42:57 UTC 2025","Sat Oct 11 01:44:55 UTC 2025","117423","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Writer to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can promote `Writer` to `Manager`.
"
"passed","Sat Oct 11 01:44:50 UTC 2025","Sat Oct 11 01:45:39 UTC 2025","48726","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Writer` via **CLI**.
"
"passed","Sat Oct 11 03:41:31 UTC 2025","Sat Oct 11 03:42:48 UTC 2025","77333","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited User access","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that `User`:

- **Cannot** access organization Settings.
- **Cannot** access organization Billing.
- **Cannot** invite member to organization.
- **Cannot** edit organization members.
- **Cannot** delete members from organization.
"
"passed","Sat Oct 11 03:11:48 UTC 2025","Sat Oct 11 03:13:09 UTC 2025","80632","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove another Admin from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` can remove another `Admin` from organization.
"
"passed","Sat Oct 11 02:10:32 UTC 2025","Sat Oct 11 02:10:45 UTC 2025","13444","E2E Tests","Shell App","TestE2EShellApp","","","Open Shell application via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.
- Get `external https` endpoint.

### Verify that:

- Shell app can be launched via UI.
"
"passed","Sat Oct 11 03:10:51 UTC 2025","Sat Oct 11 03:11:38 UTC 2025","46923","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Create First Organization via UI","
- Login with valid credentials.

### Verify that:

- User can create first organization during onboarding.
"
"failed","Sat Oct 11 02:20:30 UTC 2025","Sat Oct 11 02:22:13 UTC 2025","102899","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can demote Writer to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can demote `Writer` to `Reader`.
"
"passed","Sat Oct 11 03:47:36 UTC 2025","Sat Oct 11 03:48:52 UTC 2025","76338","UI Tests","UI Secrets","TestUISecrets","","","Search Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create Secret.

### Verify that:

- User can Search for secret via UI.
"
"skipped","Sat Oct 11 01:45:50 UTC 2025","Sat Oct 11 01:45:50 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output contains required endpoints via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that `output` API response contains required endpoints:

- Http OpenAI Compatible Chat API
- Https OpenAI Compatible Chat API
- Http OpenAI Compatible Embeddings API
- Https OpenAI Compatible Embeddings API
"
"passed","Sat Oct 11 03:31:58 UTC 2025","Sat Oct 11 03:32:40 UTC 2025","41576","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Add user not in organization to project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User **cannot** add registered user **not from organization** to project via **CLI**.
"
"passed","Sat Oct 11 03:18:51 UTC 2025","Sat Oct 11 03:20:15 UTC 2025","84448","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager cannot remove himself from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` **cannot** remove himself from project.
"
"passed","Sat Oct 11 02:56:57 UTC 2025","Sat Oct 11 02:57:22 UTC 2025","25252","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload file without project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** upload file if there is **no project created** yet via **CLI**.
"
"passed","Sat Oct 11 01:54:44 UTC 2025","Sat Oct 11 01:56:28 UTC 2025","103173","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Reader`.
"
"passed","Sat Oct 11 02:40:53 UTC 2025","Sat Oct 11 02:45:23 UTC 2025","270222","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Install Service Deployment app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can install `Service Deployment` app via **UI**.
"
"passed","Sat Oct 11 03:22:36 UTC 2025","Sat Oct 11 03:23:52 UTC 2025","76663","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite registered user without organization to organization with default project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project with `default` option.
- Signup `second user`.

### Verify that:

- User can invite to organization another user that is registered but **doesn't have organization**.
- Newly invited user is member of the `default` project.
"
"passed","Sat Oct 11 02:45:51 UTC 2025","Sat Oct 11 02:46:37 UTC 2025","45871","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify installed Service Deployment app info displayed on the app container via UI","
### Pre-conditions:
- Service Deployment app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the Service Deployment app container.
- `Show All` button displayed on the Service Deployment app container.
"
"passed","Sat Oct 11 02:55:44 UTC 2025","Sat Oct 11 02:56:49 UTC 2025","64144","CLI Tests","CLI Storage","TestCLIStorage","","","Admin remove folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create new folder via **CLI**.

### Verify that:

- User can remove folder via **CLI**.
"
"passed","Sat Oct 11 01:35:27 UTC 2025","Sat Oct 11 01:36:14 UTC 2025","46785","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Manager` via **CLI**.
"
"passed","Sat Oct 11 03:53:21 UTC 2025","Sat Oct 11 03:55:05 UTC 2025","104035","E2E Tests","Apolo CLI Hello World Job Verification","TestHelloWorldJob","","","Run Hello World Job and Validate UI and CLI Results","
- Login with valid credentials.
- Create new organization via **UI** during onboarding.
- Create new project via **CLI**.
- Run `Hello World` Job via **CLI**.

Verify that:

- Job executed successfully in **CLI**.
- Job is displayed in successful jobs via **UI**.
"
"passed","Sat Oct 11 03:56:45 UTC 2025","Sat Oct 11 03:58:02 UTC 2025","77068","UI Tests","UI Signup","TestUISignup","","","Invite not registered user to organization with default project via UI","
- Login with valid credentials.
- Create new organization.
- Create project with `default` option.
- Invite **not registered** user to organization.

### Verify that:

- Newly invited user automatically is member of default project.
"
"skipped","Sat Oct 11 01:45:40 UTC 2025","Sat Oct 11 01:45:40 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify Installed apps details info via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- DeepSeek app Details info is valid.
"
"passed","Sat Oct 11 02:55:28 UTC 2025","Sat Oct 11 02:56:23 UTC 2025","55240","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes himself from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Admin` **cannot** remove `himself` from organization via **CLI**.
"
"passed","Sat Oct 11 02:34:35 UTC 2025","Sat Oct 11 02:35:49 UTC 2025","74405","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot demote himself to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` **cannot** demote himself to `User`.
"
"passed","Sat Oct 11 03:21:49 UTC 2025","Sat Oct 11 03:23:12 UTC 2025","83185","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Reader cannot modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Reader` **doesn't** have access to modify Files.
"
"passed","Sat Oct 11 03:09:55 UTC 2025","Sat Oct 11 03:10:44 UTC 2025","48846","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Set default user credits via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Set default user credits via **CLI**.
- Invite `second user` to organization via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.
- Run `apolo config show` command via **CLI**.

### Verify that:

- Valid user credits amount is displayed in command output.
"
"passed","Sat Oct 11 02:20:51 UTC 2025","Sat Oct 11 02:22:10 UTC 2025","79174","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin cannot demote himself to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` cannot demote himself to `Manager`.
"
"passed","Sat Oct 11 01:58:43 UTC 2025","Sat Oct 11 01:59:23 UTC 2025","39939","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- PostgreSQL app uninstalled.
"
"passed","Sat Oct 11 02:40:19 UTC 2025","Sat Oct 11 02:42:57 UTC 2025","158175","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot demote Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Admin` role.

### Verify that:

- `Manager` **cannot** demote `Admin` to `Manager`.
"
"passed","Sat Oct 11 01:36:00 UTC 2025","Sat Oct 11 01:37:52 UTC 2025","112539","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote `Reader` to `Manager`.
"
"skipped","Sat Oct 11 02:47:11 UTC 2025","Sat Oct 11 02:47:57 UTC 2025","45294","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes himself from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove himself from project via **CLI**.
"
"passed","Sat Oct 11 03:10:07 UTC 2025","Sat Oct 11 03:11:42 UTC 2025","95091","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove Manager from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Admin` can remove `Manager` from organization.
"
"passed","Sat Oct 11 03:02:56 UTC 2025","Sat Oct 11 03:03:32 UTC 2025","36745","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User creates a first organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create first organization via **CLI**.
"
"passed","Sat Oct 11 01:39:50 UTC 2025","Sat Oct 11 01:41:14 UTC 2025","84678","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Manager` via **CLI**.
"
"passed","Sat Oct 11 03:20:27 UTC 2025","Sat Oct 11 03:21:42 UTC 2025","75304","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager cannot remove himself from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` **cannot** remove himself from organization.
"
"passed","Sat Oct 11 03:32:37 UTC 2025","Sat Oct 11 03:34:32 UTC 2025","115593","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Manager to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- Manager can invite `third user` as `Manager` to a project.
"
"passed","Sat Oct 11 03:51:53 UTC 2025","Sat Oct 11 03:53:21 UTC 2025","87912","UI Tests","UI Signup","TestUISignup","","","Invite not registered user as user to organization","
- Login with valid credentials.
- Create new organization.

### Verify that:

- User can invite **not registered** user to organization.
"
"passed","Sat Oct 11 02:03:11 UTC 2025","Sat Oct 11 02:04:09 UTC 2025","58168","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Manager` to `Writer` via **CLI**.
"
"passed","Sat Oct 11 01:50:35 UTC 2025","Sat Oct 11 01:52:02 UTC 2025","87299","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Manager to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can demote `Manager` to `Writer`.
"
"passed","Sat Oct 11 02:11:12 UTC 2025","Sat Oct 11 02:13:38 UTC 2025","146005","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Reader to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can promote `Reader` to `Manager`.
"
"passed","Sat Oct 11 02:16:18 UTC 2025","Sat Oct 11 02:17:54 UTC 2025","96167","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Admin role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` can change user role from `Admin` to `User`
- User after changing role from `Admin` to `User`:

- **Cannot** access organization `Settings`.
- **Cannot** access organization `Billing`.
"
"skipped","Sat Oct 11 01:46:02 UTC 2025","Sat Oct 11 01:46:02 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy POST external Chat API /v1/chat/completions returns valid data","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- POST `external` OpenAI Compatible Chat API `{hostname}/v1/chat/completions`.

### Verify that:

- API response matching expected json schema.
"
"passed","Sat Oct 11 02:10:48 UTC 2025","Sat Oct 11 02:11:02 UTC 2025","13919","E2E Tests","Shell App","TestE2EShellApp","","","Enter command in Shell app via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.
- Get `external https` endpoint.
- Launch Shell app.
- Execute `apolo config show` command.

### Verify that Shell app output contains:

- executed command `apolo config show`.
- `User configuration` section.
- `Resource Preset` section.
"
"passed","Sat Oct 11 03:05:32 UTC 2025","Sat Oct 11 03:06:06 UTC 2025","34425","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User verifies config show output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Run `apolo config show` command via **CLI**.

### Verify that:

- `apolo config show` command output is valid.
"
"passed","Sat Oct 11 02:07:23 UTC 2025","Sat Oct 11 02:07:31 UTC 2025","7338","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can reach Shell app Details page from Installed Apps page","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `Shell app Details` page displayed.
"
"skipped","Sat Oct 11 01:45:42 UTC 2025","Sat Oct 11 01:45:42 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"passed","Sat Oct 11 03:06:57 UTC 2025","Sat Oct 11 03:07:33 UTC 2025","36912","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Invite user to org via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second` user via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.

### Verify that:

- User can invite registered user to organization via **CLI**.
"
"passed","Sat Oct 11 02:11:04 UTC 2025","Sat Oct 11 02:11:54 UTC 2025","49986","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- Shell app uninstalled.
"
"passed","Sat Oct 11 02:37:01 UTC 2025","Sat Oct 11 02:38:26 UTC 2025","85455","UI Tests","UI Files","TestUIFiles","","","User download txt file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Upload `txt` file.

### Verify that:

- User can download `txt` file via UI.
- Downloaded `txt` file md5 hash matches expected file.
"
"passed","Sat Oct 11 02:42:42 UTC 2025","Sat Oct 11 02:43:36 UTC 2025","54136","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Reader` from project via **CLI**.
"
"passed","Sat Oct 11 02:24:35 UTC 2025","Sat Oct 11 02:25:50 UTC 2025","75438","UI Tests","UI Files","TestUIFiles","","","User make double click on Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create new folder.

### Verify that:

- User opens a folder with a double click on it.
"
"passed","Sat Oct 11 02:53:31 UTC 2025","Sat Oct 11 02:54:17 UTC 2025","45575","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes Manager from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.

### Verify that:

- `Admin` can remove `Manager` from organization via **CLI**.
"
"failed","Sat Oct 11 02:47:52 UTC 2025","Sat Oct 11 02:47:59 UTC 2025","6908","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify app output contains required endpoints via UI","
### Pre-conditions:
- Service Deployment app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Http internal API
- Https external API
"
"passed","Sat Oct 11 03:16:35 UTC 2025","Sat Oct 11 03:18:15 UTC 2025","99302","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Set default organization credits via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can set default organization credits.
"
"passed","Sat Oct 11 03:07:42 UTC 2025","Sat Oct 11 03:08:27 UTC 2025","45455","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Invite user to organization with default project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create first project with 'default' option via **CLI**.

### Verify that:

- User can invite registered user to organization via **CLI**.
- Newly invited user is member of default project.
"
"passed","Sat Oct 11 01:54:18 UTC 2025","Sat Oct 11 01:54:30 UTC 2025","12469","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify PostgreSQL app details info via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- PostgreSQL app Details info is valid.
"
"passed","Sat Oct 11 02:08:27 UTC 2025","Sat Oct 11 02:09:26 UTC 2025","58461","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on Shell App container.

### Verify that:

- Shell app displayed in Installed Apps.
"
"skipped","Sat Oct 11 01:45:29 UTC 2025","Sat Oct 11 01:45:29 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify installed DeepSeek app listed in Installed apps via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- DeepSeek app displayed in Installed Apps.
"
"passed","Sat Oct 11 02:56:11 UTC 2025","Sat Oct 11 02:56:43 UTC 2025","32321","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin cannot remove himself from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- `Admin` **cannot** remove himself from project.
"
"passed","Sat Oct 11 01:59:27 UTC 2025","Sat Oct 11 02:00:27 UTC 2025","60006","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Writer` to `Admin` via **CLI**.
"
"passed","Sat Oct 11 01:46:51 UTC 2025","Sat Oct 11 01:47:45 UTC 2025","54142","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Reader` via **CLI**.
"
"failed","Sat Oct 11 03:46:22 UTC 2025","Sat Oct 11 03:47:18 UTC 2025","55933","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite member that NOT in organization to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- DO NOT invite `second user` to organization.

### Verify that:

- User **cannot** invite to project another user which is **not member of organization**.
"
"passed","Sat Oct 11 02:07:07 UTC 2025","Sat Oct 11 02:07:12 UTC 2025","5212","E2E Tests","Shell App","TestE2EShellApp","","","Verify event list of installed Shell app via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- GET '/events' endpoint.

### Verify that:

- App events list contains states queued, progressing and healthy.
"
"passed","Sat Oct 11 02:22:16 UTC 2025","Sat Oct 11 02:24:00 UTC 2025","103831","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager can change User role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` can change user role from User to `Manager`.
- User after changing role from `User` to `Manager`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"failed","Sat Oct 11 02:48:55 UTC 2025","Sat Oct 11 02:50:48 UTC 2025","113321","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Export Service Deployment app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Select `cpu-medium` Resource Preset.
- Set app Display name.
- Click `Export config` button.

### Verify that:

- Config downloaded as `yaml` file matches expected schema.
- Exported config contains valid data.
"
"passed","Sat Oct 11 01:52:25 UTC 2025","Sat Oct 11 01:52:32 UTC 2025","6541","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify User can reach PostgreSQL app Details page from Installed Apps page","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `PostgreSQL app Details` page displayed.
"
"passed","Sat Oct 11 02:07:27 UTC 2025","Sat Oct 11 02:08:31 UTC 2025","63262","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Writer change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Writer` **cannot** change member project roles via **CLI**.
"
"passed","Sat Oct 11 01:48:23 UTC 2025","Sat Oct 11 01:49:09 UTC 2025","45986","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Writer` via **CLI**.
"
"passed","Sat Oct 11 03:18:22 UTC 2025","Sat Oct 11 03:21:06 UTC 2025","163981","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Search Member of organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- User can search organization members using `Search` field.
"
"passed","Sat Oct 11 02:01:05 UTC 2025","Sat Oct 11 02:02:34 UTC 2025","88604","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Manager` to `Reader` via **CLI**.
"
"passed","Sat Oct 11 01:40:37 UTC 2025","Sat Oct 11 01:42:51 UTC 2025","133732","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Writer to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can demote `Writer` to `Reader`.
"
"passed","Sat Oct 11 03:47:54 UTC 2025","Sat Oct 11 03:48:34 UTC 2025","40191","CLI Tests","CLI Login","TestCLILogin","","","User with organization and project logs in with auth token via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create organization via API.
- Create project via API.

### Verify that:

- User can login with Bearer auth token via CLI.
- Login output in CLI contain valid organization and project.
"
"passed","Sat Oct 11 02:39:48 UTC 2025","Sat Oct 11 02:40:46 UTC 2025","57717","UI Tests","UI Files","TestUIFiles","","","User delete File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Upload `txt` file.

### Verify that:

- User can delete a file with Delete button from File action bar.
"
"passed","Sat Oct 11 01:52:09 UTC 2025","Sat Oct 11 01:54:08 UTC 2025","118551","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Manager to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can promote `Manager` to `Admin`.
"
"skipped","Sat Oct 11 01:46:04 UTC 2025","Sat Oct 11 01:46:04 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- DeepSeek app uninstalled.
"
"passed","Sat Oct 11 01:48:14 UTC 2025","Sat Oct 11 01:50:28 UTC 2025","133823","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Manager to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can demote `Manager` to `Reader`.
"
"passed","Sat Oct 11 02:07:15 UTC 2025","Sat Oct 11 02:07:21 UTC 2025","5604","E2E Tests","Shell App","TestE2EShellApp","","","Verify installed Shell app listed in Installed apps via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- Shell app displayed in Installed Apps.
"
"passed","Sat Oct 11 03:03:40 UTC 2025","Sat Oct 11 03:04:32 UTC 2025","51831","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User creates a second organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.

### Verify that:

- User can create second organization via **CLI**.
"
"passed","Sat Oct 11 01:55:33 UTC 2025","Sat Oct 11 01:56:30 UTC 2025","57202","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Reader` to `Admin` via **CLI**.
"
"passed","Sat Oct 11 02:03:33 UTC 2025","Sat Oct 11 02:07:05 UTC 2025","212257","E2E Tests","Shell App","TestE2EShellApp","","","Install Shell app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can install `Shell` app via **UI**.
"
"passed","Sat Oct 11 03:08:30 UTC 2025","Sat Oct 11 03:10:00 UTC 2025","89617","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove User from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can remove `User` from organization.
"
"passed","Sat Oct 11 02:50:12 UTC 2025","Sat Oct 11 02:51:39 UTC 2025","87060","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Reader removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Reader` **cannot** remove members from project via **CLI**.
"
"skipped","Sat Oct 11 01:45:52 UTC 2025","Sat Oct 11 01:45:52 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output endpoints schema via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that:

- API endpoints data matching expected json schema.
"
"skipped","Sat Oct 11 01:45:35 UTC 2025","Sat Oct 11 01:45:35 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify installed DeepSeek app info displayed on the app container via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the DeepSeek app container.
- `Show All` button displayed on the DeepSeek app container.
"
"passed","Sat Oct 11 02:30:33 UTC 2025","Sat Oct 11 02:32:27 UTC 2025","113988","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Admin role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `Admin` to `User`.
"
"passed","Sat Oct 11 03:38:15 UTC 2025","Sat Oct 11 03:39:24 UTC 2025","68707","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create second disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can create second disk via **CLI**.
"
"passed","Sat Oct 11 03:41:25 UTC 2025","Sat Oct 11 03:42:42 UTC 2025","77742","CLI Tests","CLI Disks","TestCLIDisks","","","Admin remove disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can delete disk via **CLI**.
"
"passed","Sat Oct 11 01:56:42 UTC 2025","Sat Oct 11 01:57:33 UTC 2025","51957","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Writer` to `Reader` via **CLI**.
"
"failed","Sat Oct 11 02:48:01 UTC 2025","Sat Oct 11 02:48:08 UTC 2025","7052","E2E Tests","Service Deployment App","TestE2EServiceDeploymentApp","","","Verify app output API schemas is valid via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- API sections data matching expected data format.
"
"passed","Sat Oct 11 03:25:25 UTC 2025","Sat Oct 11 03:26:48 UTC 2025","82822","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` has access to modify Files.
"
"skipped","Sat Oct 11 01:45:47 UTC 2025","Sat Oct 11 01:45:47 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output API schemas is valid via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- API sections data matching expected data format.
"
"passed","Sat Oct 11 01:53:55 UTC 2025","Sat Oct 11 01:54:54 UTC 2025","59884","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Reader` to `Manager` via **CLI**.
"
"passed","Sat Oct 11 03:04:12 UTC 2025","Sat Oct 11 03:05:19 UTC 2025","67319","CLI Tests","CLI Storage","TestCLIStorage","","","Admin download bin file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `bin` file via **CLI**.

### Verify that:

- User can download `bin` file via **CLI**.
- downloaded `bin` file md5 hash matches expected file.
"
"passed","Sat Oct 11 03:26:41 UTC 2025","Sat Oct 11 03:27:56 UTC 2025","74427","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User verifies admin get-projects command output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Run `apolo admin get-projects` command via **CLI**.

### Verify that:

- Valid project info is displayed in command output.
"
"passed","Sat Oct 11 03:33:43 UTC 2025","Sat Oct 11 03:34:20 UTC 2025","37096","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create First Project from top pane of main via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create first project in organization from project menu in the **top pane of the main page**.
"
"passed","Sat Oct 11 02:18:02 UTC 2025","Sat Oct 11 02:19:12 UTC 2025","70558","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Admin role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with Admin role via **API**.

### Verify that:

- `Admin` can change user role from `Admin` to `Manager`.
- User after changing role from `Admin` to `Manager`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Sat Oct 11 01:59:25 UTC 2025","Sat Oct 11 02:00:30 UTC 2025","64456","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Export PostgreSQL app config via UI","
 Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Select the Preset `cpu-medium`
- Set PGbouncer.replicas to `1`
- Set Postgres Configuration.Instance replicas to `1`
- Click on Database Users `Add Entry`
- Enter Database `user name`
- Enter Database `name`
- Select PG Bouncer.Resource Preset `cpu-medium`
- Click `Export config` button.

### Verify that:

- Config downloaded as `yaml` file matches expected schema.
- Exported config contains valid data.
"
