"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Wed Sep 10 01:52:45 UTC 2025","Wed Sep 10 01:54:00 UTC 2025","74396","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Writer`.
"
"passed","Wed Sep 10 01:58:35 UTC 2025","Wed Sep 10 01:59:39 UTC 2025","63917","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Reader change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Reader` **cannot** change member project roles via **CLI**.
"
"passed","Wed Sep 10 01:46:28 UTC 2025","Wed Sep 10 01:47:50 UTC 2025","82697","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Reader` to `Manager` via **CLI**.
"
"passed","Wed Sep 10 02:46:21 UTC 2025","Wed Sep 10 02:47:16 UTC 2025","55053","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Create First Organization via UI","
- Login with valid credentials.

### Verify that:

- User can create first organization during onboarding.
"
"passed","Wed Sep 10 02:51:21 UTC 2025","Wed Sep 10 02:53:46 UTC 2025","144948","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager can remove User from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` can remove `User` from organization.
"
"passed","Wed Sep 10 02:09:53 UTC 2025","Wed Sep 10 02:12:41 UTC 2025","168082","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Writer to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can promote `Writer` to `Manager`.
"
"passed","Wed Sep 10 01:42:43 UTC 2025","Wed Sep 10 01:43:56 UTC 2025","73731","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Writer to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can promote `Writer` to `Manager`.
"
"passed","Wed Sep 10 02:14:15 UTC 2025","Wed Sep 10 02:15:26 UTC 2025","70957","UI Tests","UI Files","TestUIFiles","","","User delete File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `txt` file.

### Verify that:

- User can delete a file with Delete button from File action bar.
"
"passed","Wed Sep 10 01:49:47 UTC 2025","Wed Sep 10 01:52:05 UTC 2025","138101","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change User role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `User` to `Admin`.
"
"passed","Wed Sep 10 02:12:31 UTC 2025","Wed Sep 10 02:13:17 UTC 2025","45316","UI Tests","UI Files","TestUIFiles","","","User download txt file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `txt` file.

### Verify that:

- User can download `txt` file via UI.
- Downloaded `txt` file md5 hash matches expected file.
"
"passed","Wed Sep 10 03:10:11 UTC 2025","Wed Sep 10 03:11:10 UTC 2025","59280","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite not registered user to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User **cannot** invite to project another user which is **not registered**.
"
"passed","Wed Sep 10 02:30:38 UTC 2025","Wed Sep 10 02:31:16 UTC 2025","37594","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Invite user to organization with default project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create first project with 'default' option via **CLI**.

### Verify that:

- User can invite registered user to organization via **CLI**.
- Newly invited user is member of default project.
"
"passed","Wed Sep 10 01:33:14 UTC 2025","Wed Sep 10 01:35:11 UTC 2025","117424","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote Reader to `Writer`.
"
"passed","Wed Sep 10 02:09:19 UTC 2025","Wed Sep 10 02:10:21 UTC 2025","61840","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Writer from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Writer` from project via **CLI**.
"
"passed","Wed Sep 10 02:09:25 UTC 2025","Wed Sep 10 02:10:10 UTC 2025","45508","UI Tests","UI Files","TestUIFiles","","","User upload txt file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can upload `txt` file via UI.
"
"passed","Wed Sep 10 03:12:11 UTC 2025","Wed Sep 10 03:12:46 UTC 2025","34988","CLI Tests","CLI Login","TestCLILogin","","","User with organization logs in with auth token via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create organization via **API**.

### Verify that:

- User can login with Bearer auth token via **CLI**.
- Login output in CLI valid `organization` and no `project` info.
"
"failed","Wed Sep 10 03:01:39 UTC 2025","Wed Sep 10 03:02:30 UTC 2025","51006","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager cannot invite Admin to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` **cannot** invite `third user` as `Admin` to a project.
"
"passed","Wed Sep 10 01:57:33 UTC 2025","Wed Sep 10 01:58:27 UTC 2025","54600","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Writer change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Writer` **cannot** change member project roles via **CLI**.
"
"passed","Wed Sep 10 02:50:36 UTC 2025","Wed Sep 10 02:52:34 UTC 2025","117989","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` has access to modify Files.
"
"skipped","Wed Sep 10 02:13:43 UTC 2025","Wed Sep 10 02:14:26 UTC 2025","43370","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes himself from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove himself from project via **CLI**.
"
"passed","Wed Sep 10 02:05:56 UTC 2025","Wed Sep 10 02:07:06 UTC 2025","70356","UI Tests","UI Files","TestUIFiles","","","User rename Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.

### Verify that:

- User can rename a folder with `Rename` button from File action bar.
"
"passed","Wed Sep 10 02:12:49 UTC 2025","Wed Sep 10 02:15:00 UTC 2025","130895","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot promote Writer to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` **cannot** promote `Writer` to `Admin`.
"
"passed","Wed Sep 10 02:10:28 UTC 2025","Wed Sep 10 02:12:16 UTC 2025","108463","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Manager from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove another `Manager` from project via **CLI**.
"
"passed","Wed Sep 10 02:20:13 UTC 2025","Wed Sep 10 02:22:40 UTC 2025","147431","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Reader cannot change member roles","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Reader` **cannot** change member roles.
"
"passed","Wed Sep 10 03:08:26 UTC 2025","Wed Sep 10 03:10:04 UTC 2025","98358","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite member that NOT in organization to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- DO NOT invite `second user` to organization.

### Verify that:

- User **cannot** invite to project another user which is **not member of organization**.
"
"passed","Wed Sep 10 01:37:37 UTC 2025","Wed Sep 10 01:38:58 UTC 2025","80492","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote `Reader` to `Manager`.
"
"passed","Wed Sep 10 03:04:47 UTC 2025","Wed Sep 10 03:05:32 UTC 2025","44445","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create second disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can create second disk via **CLI**.
"
"passed","Wed Sep 10 03:13:28 UTC 2025","Wed Sep 10 03:14:24 UTC 2025","55712","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify User cannot purchase credits via top pane","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role.

### Verify that:

- `User` **cannot** purchase credits via top pane.
"
"passed","Wed Sep 10 02:28:06 UTC 2025","Wed Sep 10 02:28:33 UTC 2025","26338","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User verifies config show output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Run `apolo config show` command via **CLI**.

### Verify that:

- `apolo config show` command output is valid.
"
"passed","Wed Sep 10 02:44:51 UTC 2025","Wed Sep 10 02:44:58 UTC 2025","6524","E2E Tests","Shell App","TestE2EShellApp","","","Verify Installed apps details info via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- Shell app Details info is valid.
"
"passed","Wed Sep 10 03:06:16 UTC 2025","Wed Sep 10 03:07:11 UTC 2025","54658","CLI Tests","CLI Disks","TestCLIDisks","","","Admin remove disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can delete disk via **CLI**.
"
"passed","Wed Sep 10 02:24:15 UTC 2025","Wed Sep 10 02:25:48 UTC 2025","92945","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove another Admin from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can remove another `Admin` from project.
"
"passed","Wed Sep 10 02:31:23 UTC 2025","Wed Sep 10 02:32:27 UTC 2025","63507","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User verifies admin get-org-users output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Invite `second user` to organization via **CLI**.
- Run `apolo admin get-org-users` command via **CLI**.

### Verify that:

- Organization members are listed with valid data in command output.
"
"passed","Wed Sep 10 02:44:29 UTC 2025","Wed Sep 10 02:44:33 UTC 2025","4550","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify installed DeepSeek app info displayed on the app container via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the DeepSeek app container.
- `Show All` button displayed on the DeepSeek app container.
"
"passed","Wed Sep 10 03:01:37 UTC 2025","Wed Sep 10 03:02:54 UTC 2025","76807","UI Tests","UI Disks","TestUIDisks","","","Search Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.
- Create second Disk.

### Verify that:

- User can search for Disk via UI with the `Search` field.
"
"passed","Wed Sep 10 01:44:59 UTC 2025","Wed Sep 10 01:46:21 UTC 2025","82320","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Reader` to `Writer` via **CLI**.
"
"passed","Wed Sep 10 02:33:08 UTC 2025","Wed Sep 10 02:35:47 UTC 2025","159752","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove another Manager from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Manager` role.

### Verify that:

- `Manager` can remove another `Manager` from project.
"
"passed","Wed Sep 10 02:43:51 UTC 2025","Wed Sep 10 02:44:03 UTC 2025","11740","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can reach Shell app Details page from Installed Apps page","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `Shell app Details` page displayed.
"
"passed","Wed Sep 10 02:21:10 UTC 2025","Wed Sep 10 02:21:56 UTC 2025","46491","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload bin file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can upload `bin` file via **CLI**.
"
"passed","Wed Sep 10 02:58:35 UTC 2025","Wed Sep 10 02:59:09 UTC 2025","33842","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User creates a first project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create first project via **CLI**.
"
"passed","Wed Sep 10 01:33:31 UTC 2025","Wed Sep 10 01:34:21 UTC 2025","50074","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Manager` via **CLI**.
"
"passed","Wed Sep 10 02:23:45 UTC 2025","Wed Sep 10 02:24:20 UTC 2025","34529","CLI Tests","CLI Storage","TestCLIStorage","","","Admin rename text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can rename `txt` file via **CLI**.
"
"passed","Wed Sep 10 02:45:07 UTC 2025","Wed Sep 10 02:46:36 UTC 2025","89836","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- Shell app uninstalled.
"
"passed","Wed Sep 10 02:07:18 UTC 2025","Wed Sep 10 02:08:05 UTC 2025","47109","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes himself from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- `Admin` **cannot** remove himself from project via **CLI**.
"
"passed","Wed Sep 10 01:50:18 UTC 2025","Wed Sep 10 01:51:10 UTC 2025","52818","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Writer` to `Manager` via **CLI**.
"
"passed","Wed Sep 10 01:37:41 UTC 2025","Wed Sep 10 01:38:28 UTC 2025","46987","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Admin` via **CLI**.
"
"passed","Wed Sep 10 01:41:26 UTC 2025","Wed Sep 10 01:42:31 UTC 2025","65721","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Reader` via **CLI**.
"
"passed","Wed Sep 10 02:17:29 UTC 2025","Wed Sep 10 02:18:24 UTC 2025","55525","CLI Tests","CLI Storage","TestCLIStorage","","","Admin create folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can create folder via **CLI**.
"
"passed","Wed Sep 10 03:03:02 UTC 2025","Wed Sep 10 03:03:44 UTC 2025","42166","UI Tests","UI Disks","TestUIDisks","","","Open Disk info view by click on disk button","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.

### Verify that:

- After click on disk button Disk info view appears.
"
"passed","Wed Sep 10 02:04:51 UTC 2025","Wed Sep 10 02:05:30 UTC 2025","39662","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Manager from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can remove `Manager` from project via **CLI**.
"
"passed","Wed Sep 10 02:33:12 UTC 2025","Wed Sep 10 02:44:11 UTC 2025","659154","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Install DeepSeek app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can install `DeepSeek` app via **UI**.
"
"passed","Wed Sep 10 02:48:27 UTC 2025","Wed Sep 10 02:49:24 UTC 2025","56941","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Switch between organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create second organization via UI.

### Verify that:

- User can switch between organizations.
"
"passed","Wed Sep 10 02:14:33 UTC 2025","Wed Sep 10 02:15:25 UTC 2025","52290","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Writer removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Writer` **cannot** remove members from project via **CLI**.
"
"passed","Wed Sep 10 02:26:13 UTC 2025","Wed Sep 10 02:27:17 UTC 2025","64208","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin cannot remove himself from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- `Admin` **cannot** remove himself from project.
"
"passed","Wed Sep 10 02:10:18 UTC 2025","Wed Sep 10 02:11:12 UTC 2025","54450","UI Tests","UI Files","TestUIFiles","","","User make single click on File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `txt` file.
- Single click on file.

### Verify that:
- File info section appears.
- File action bar appears.
"
"passed","Wed Sep 10 03:05:56 UTC 2025","Wed Sep 10 03:07:20 UTC 2025","84069","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited User access","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that `User`:

- **Cannot** access organization Settings.
- **Cannot** access organization Billing.
- **Cannot** invite member to organization.
- **Cannot** edit organization members.
- **Cannot** delete members from organization.
"
"passed","Wed Sep 10 02:53:53 UTC 2025","Wed Sep 10 02:55:37 UTC 2025","104063","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager can remove another Manager from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` can remove another `Manager` from organization.
"
"passed","Wed Sep 10 01:47:31 UTC 2025","Wed Sep 10 01:49:40 UTC 2025","128954","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager can change User role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` can change user role from User to `Manager`.
- User after changing role from `User` to `Manager`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Wed Sep 10 02:05:08 UTC 2025","Wed Sep 10 02:05:48 UTC 2025","40084","UI Tests","UI Files","TestUIFiles","","","User make double click on Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.

### Verify that:

- User opens a folder with a double click on it.
"
"passed","Wed Sep 10 02:22:58 UTC 2025","Wed Sep 10 02:23:38 UTC 2025","39671","CLI Tests","CLI Storage","TestCLIStorage","","","Admin download bin file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `bin` file via **CLI**.

### Verify that:

- User can download `bin` file via **CLI**.
- downloaded `bin` file md5 hash matches expected file.
"
"passed","Wed Sep 10 03:12:54 UTC 2025","Wed Sep 10 03:13:18 UTC 2025","23782","CLI Tests","CLI Login","TestCLILogin","","","User with organization and project logs in with auth token via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create organization via API.
- Create project via API.

### Verify that:

- User can login with Bearer auth token via CLI.
- Login output in CLI contain valid organization and project.
"
"passed","Wed Sep 10 02:15:07 UTC 2025","Wed Sep 10 02:17:50 UTC 2025","163070","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot demote Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Admin` role.

### Verify that:

- `Manager` **cannot** demote `Admin` to `Manager`.
"
"passed","Wed Sep 10 01:40:31 UTC 2025","Wed Sep 10 01:41:18 UTC 2025","46524","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Admin` via **CLI**.
"
"passed","Wed Sep 10 02:03:46 UTC 2025","Wed Sep 10 02:04:42 UTC 2025","56067","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Writer from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can remove `Writer` from project via **CLI**.
"
"passed","Wed Sep 10 01:47:58 UTC 2025","Wed Sep 10 01:48:55 UTC 2025","57075","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Reader` to `Admin` via **CLI**.
"
"passed","Wed Sep 10 02:24:27 UTC 2025","Wed Sep 10 02:25:05 UTC 2025","38711","CLI Tests","CLI Storage","TestCLIStorage","","","Admin remove text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can remove `txt` file via **CLI**.
"
"passed","Wed Sep 10 01:35:26 UTC 2025","Wed Sep 10 01:36:19 UTC 2025","52823","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Reader` via **CLI**.
"
"passed","Wed Sep 10 02:18:31 UTC 2025","Wed Sep 10 02:19:03 UTC 2025","31959","CLI Tests","CLI Storage","TestCLIStorage","","","Admin rename folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create new folder via **CLI**.

### Verify that:

- User can rename folder via **CLI**.
"
"passed","Wed Sep 10 03:16:53 UTC 2025","Wed Sep 10 03:18:26 UTC 2025","92287","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify Admin can purchase organization credits with custom amount","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- Admin can purchase credits by input custom amount.
"
"passed","Wed Sep 10 01:53:50 UTC 2025","Wed Sep 10 01:54:42 UTC 2025","52086","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Manager` to `Writer` via **CLI**.
"
"failed","Wed Sep 10 02:56:30 UTC 2025","Wed Sep 10 02:57:19 UTC 2025","48757","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Writer to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` can invite `third user` as `Writer` to a project.
"
"failed","Wed Sep 10 02:59:12 UTC 2025","Wed Sep 10 02:59:54 UTC 2025","41431","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Manager to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- Manager can invite `third user` as `Manager` to a project.
"
"passed","Wed Sep 10 01:38:35 UTC 2025","Wed Sep 10 01:39:44 UTC 2025","69561","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Manager role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:
- `Admin` can change user role from `Manager` to `Admin`
- User after changing role from `Manager` to `Admin`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Wed Sep 10 03:13:09 UTC 2025","Wed Sep 10 03:13:50 UTC 2025","40223","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create second secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create first secret via **CLI**.

### Verify that:

- User can create second secret via **CLI**.
"
"passed","Wed Sep 10 02:38:30 UTC 2025","Wed Sep 10 02:39:56 UTC 2025","85531","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager cannot remove himself from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` **cannot** remove himself from project.
"
"passed","Wed Sep 10 02:40:02 UTC 2025","Wed Sep 10 02:42:23 UTC 2025","141056","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Writer cannot remove members from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Writer` **cannot** remove members from project.
"
"passed","Wed Sep 10 01:44:13 UTC 2025","Wed Sep 10 01:45:33 UTC 2025","79890","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin cannot demote himself to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` cannot demote himself to `Manager`.
"
"passed","Wed Sep 10 02:44:13 UTC 2025","Wed Sep 10 02:44:18 UTC 2025","5157","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify installed DeepSeek app listed in Installed apps via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- DeepSeek app displayed in Installed Apps.
"
"passed","Wed Sep 10 02:17:23 UTC 2025","Wed Sep 10 02:18:51 UTC 2025","87592","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Reader from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can remove `Reader` from `project`.
"
"passed","Wed Sep 10 02:25:53 UTC 2025","Wed Sep 10 02:26:49 UTC 2025","56881","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User creates a second organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.

### Verify that:

- User can create second organization via **CLI**.
"
"passed","Wed Sep 10 02:08:35 UTC 2025","Wed Sep 10 02:09:18 UTC 2025","43320","UI Tests","UI Files","TestUIFiles","","","User upload bin file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can upload `bin` file via UI.
"
"passed","Wed Sep 10 02:01:04 UTC 2025","Wed Sep 10 02:02:27 UTC 2025","82752","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot demote himself to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` **cannot** demote himself to `User`.
"
"passed","Wed Sep 10 01:34:29 UTC 2025","Wed Sep 10 01:35:18 UTC 2025","49548","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Admin` via **CLI**.
"
"passed","Wed Sep 10 02:07:11 UTC 2025","Wed Sep 10 02:09:46 UTC 2025","154653","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can demote Writer to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can demote `Writer` to `Reader`.
"
"passed","Wed Sep 10 03:10:22 UTC 2025","Wed Sep 10 03:11:14 UTC 2025","51732","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Admin can access organization billing","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that `Admin`:

- Can access organization Billing.
"
"passed","Wed Sep 10 01:36:26 UTC 2025","Wed Sep 10 01:37:34 UTC 2025","67699","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Manager` via **CLI**.
"
"passed","Wed Sep 10 03:00:03 UTC 2025","Wed Sep 10 03:00:42 UTC 2025","39608","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User creates a second project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create first project via **CLI**.

### Verify that:

- User can create second project via **CLI**.
"
"passed","Wed Sep 10 03:07:25 UTC 2025","Wed Sep 10 03:08:00 UTC 2025","35244","UI Tests","UI Secrets","TestUISecrets","","","Create First Secret without project via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User **cannot** create first Secret if **no project created** yet.
"
"passed","Wed Sep 10 03:11:17 UTC 2025","Wed Sep 10 03:12:03 UTC 2025","45183","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create secret with no project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create secret if there is no project created via **CLI**.
"
"passed","Wed Sep 10 03:02:37 UTC 2025","Wed Sep 10 03:03:10 UTC 2025","32944","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create First Project from main page via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create first project in organization from **the main page**.
"
"passed","Wed Sep 10 03:04:10 UTC 2025","Wed Sep 10 03:04:51 UTC 2025","41108","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create second project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create second project in organization.
"
"passed","Wed Sep 10 03:15:00 UTC 2025","Wed Sep 10 03:16:20 UTC 2025","80140","UI Tests","UI Signup","TestUISignup","","","Invite not registered user to organization with default project via UI","
- Login with valid credentials.
- Create new organization.
- Create project with `default` option.
- Invite **not registered** user to organization.

### Verify that:

- Newly invited user automatically is member of default project.
"
"passed","Wed Sep 10 02:48:56 UTC 2025","Wed Sep 10 02:50:27 UTC 2025","90149","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Writer can modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Writer` has access to modify Files.
"
"passed","Wed Sep 10 01:32:30 UTC 2025","Wed Sep 10 01:33:24 UTC 2025","54960","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Writer` via **CLI**.
"
"passed","Wed Sep 10 02:44:35 UTC 2025","Wed Sep 10 02:44:46 UTC 2025","10994","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on Shell App container.

### Verify that:

- DeepSeek app displayed in Installed Apps.
"
"passed","Wed Sep 10 02:49:33 UTC 2025","Wed Sep 10 02:50:56 UTC 2025","82538","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Set default organization credits via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can set default organization credits.
"
"passed","Wed Sep 10 01:49:06 UTC 2025","Wed Sep 10 01:50:30 UTC 2025","84069","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Manager to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can promote `Manager` to `Admin`.
"
"passed","Wed Sep 10 03:02:46 UTC 2025","Wed Sep 10 03:03:27 UTC 2025","40794","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Add user not in organization to project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User **cannot** add registered user **not from organization** to project via **CLI**.
"
"passed","Wed Sep 10 02:44:20 UTC 2025","Wed Sep 10 02:44:27 UTC 2025","6077","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can reach DeepSeek app Details page from Installed Apps page","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `DeepSeek app Details` page displayed.
"
"passed","Wed Sep 10 03:13:46 UTC 2025","Wed Sep 10 03:14:54 UTC 2025","67891","UI Tests","UI Signup","TestUISignup","","","Invite not registered user as user to organization","
- Login with valid credentials.
- Create new organization.

### Verify that:

- User can invite **not registered** user to organization.
"
"passed","Wed Sep 10 02:43:44 UTC 2025","Wed Sep 10 02:43:49 UTC 2025","5327","E2E Tests","Shell App","TestE2EShellApp","","","Verify installed Shell app listed in Installed apps via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- Shell app displayed in Installed Apps.
"
"passed","Wed Sep 10 03:11:50 UTC 2025","Wed Sep 10 03:13:20 UTC 2025","90674","UI Tests","UI Secrets","TestUISecrets","","","Delete Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create Secret.

### Verify that:

- User can delete Secret.
"
"passed","Wed Sep 10 01:54:07 UTC 2025","Wed Sep 10 01:55:32 UTC 2025","85245","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Manager`.
"
"passed","Wed Sep 10 02:29:23 UTC 2025","Wed Sep 10 02:29:48 UTC 2025","25537","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Invite user to org via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second` user via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.

### Verify that:

- User can invite registered user to organization via **CLI**.
"
"passed","Wed Sep 10 01:49:03 UTC 2025","Wed Sep 10 01:50:10 UTC 2025","66306","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Writer` to `Reader` via **CLI**.
"
"passed","Wed Sep 10 02:32:35 UTC 2025","Wed Sep 10 02:33:06 UTC 2025","30626","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Set default user credits via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Set default user credits via **CLI**.
- Invite `second user` to organization via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.
- Run `apolo config show` command via **CLI**.

### Verify that:

- Valid user credits amount is displayed in command output.
"
"passed","Wed Sep 10 01:52:20 UTC 2025","Wed Sep 10 01:54:21 UTC 2025","120985","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager can change Manager role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` can change user role from `Manager` to `User`.
- User after changing role from `Manager` to `User`:

- **Cannot** access organization `Settings`.
- **Cannot** access organization `Billing`.
"
"passed","Wed Sep 10 01:51:18 UTC 2025","Wed Sep 10 01:52:40 UTC 2025","81974","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Writer` to `Admin` via **CLI**.
"
"passed","Wed Sep 10 03:03:17 UTC 2025","Wed Sep 10 03:04:04 UTC 2025","46240","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create First Project from top pane of main via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create first project in organization from project menu in the **top pane of the main page**.
"
"passed","Wed Sep 10 03:05:38 UTC 2025","Wed Sep 10 03:06:09 UTC 2025","30524","CLI Tests","CLI Disks","TestCLIDisks","","","Admin get disk by ID via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can get disk info by disk ID via **CLI**.
"
"passed","Wed Sep 10 02:02:56 UTC 2025","Wed Sep 10 02:04:14 UTC 2025","78242","UI Tests","UI Files","TestUIFiles","","","Verify Admin can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can create new folder
"
"passed","Wed Sep 10 02:49:52 UTC 2025","Wed Sep 10 02:51:14 UTC 2025","81847","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin cannot remove himself from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` **cannot** remove himself from organization.
"
"passed","Wed Sep 10 02:27:37 UTC 2025","Wed Sep 10 02:30:03 UTC 2025","145946","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove Reader from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can remove `Reader` from project.
"
"passed","Wed Sep 10 02:22:39 UTC 2025","Wed Sep 10 02:24:08 UTC 2025","88932","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Manager from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can remove `Manager` from project.
"
"passed","Wed Sep 10 01:55:53 UTC 2025","Wed Sep 10 01:57:26 UTC 2025","92398","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Admin to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Admin` to `Reader` via **CLI**.
"
"passed","Wed Sep 10 02:41:24 UTC 2025","Wed Sep 10 02:43:42 UTC 2025","137767","E2E Tests","Shell App","TestE2EShellApp","","","Install Shell app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can install `Shell` app via **UI**.
"
"passed","Wed Sep 10 02:25:14 UTC 2025","Wed Sep 10 02:25:45 UTC 2025","30817","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User creates a first organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create first organization via **CLI**.
"
"passed","Wed Sep 10 02:44:28 UTC 2025","Wed Sep 10 02:44:49 UTC 2025","21399","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on Shell App container.

### Verify that:

- Shell app displayed in Installed Apps.
"
"passed","Wed Sep 10 02:07:18 UTC 2025","Wed Sep 10 02:08:29 UTC 2025","70517","UI Tests","UI Files","TestUIFiles","","","User delete Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.

### Verify that:

- User can delete a folder with `Delete` button from File action bar.
"
"passed","Wed Sep 10 02:51:04 UTC 2025","Wed Sep 10 02:53:51 UTC 2025","167310","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Search Member of organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- User can search organization members using `Search` field.
"
"passed","Wed Sep 10 02:47:36 UTC 2025","Wed Sep 10 02:48:50 UTC 2025","73803","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Reader cannot modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Reader` **doesn't** have access to modify Files.
"
"passed","Wed Sep 10 02:59:52 UTC 2025","Wed Sep 10 03:00:34 UTC 2025","41607","UI Tests","UI Disks","TestUIDisks","","","Create First Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create first Disk after project created.
"
"passed","Wed Sep 10 02:42:30 UTC 2025","Wed Sep 10 02:44:25 UTC 2025","114576","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Reader cannot remove members from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Reader` **cannot** remove members from project.
"
"passed","Wed Sep 10 01:58:53 UTC 2025","Wed Sep 10 02:01:14 UTC 2025","141423","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Reader to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can promote `Reader` to `Writer`.
"
"passed","Wed Sep 10 03:09:30 UTC 2025","Wed Sep 10 03:10:15 UTC 2025","45051","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Admin can access organization settings","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that `Admin`:

- Can access organization Settings.
"
"passed","Wed Sep 10 02:08:11 UTC 2025","Wed Sep 10 02:09:11 UTC 2025","59593","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Reader` from project via **CLI**.
"
"passed","Wed Sep 10 03:08:07 UTC 2025","Wed Sep 10 03:08:59 UTC 2025","51969","UI Tests","UI Secrets","TestUISecrets","","","Create First Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create first Secret after project created.
"
"passed","Wed Sep 10 02:45:00 UTC 2025","Wed Sep 10 02:45:04 UTC 2025","4359","E2E Tests","Shell App","TestE2EShellApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"passed","Wed Sep 10 01:50:39 UTC 2025","Wed Sep 10 01:52:38 UTC 2025","119479","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Reader`.
"
"passed","Wed Sep 10 03:09:06 UTC 2025","Wed Sep 10 03:10:09 UTC 2025","63681","UI Tests","UI Secrets","TestUISecrets","","","Create Second Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create Secret.

### Verify that:

- User can create second Secret.
"
"passed","Wed Sep 10 01:54:49 UTC 2025","Wed Sep 10 01:55:46 UTC 2025","56656","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Manager` to `Admin` via **CLI**.
"
"passed","Wed Sep 10 02:04:20 UTC 2025","Wed Sep 10 02:05:02 UTC 2025","41257","UI Tests","UI Files","TestUIFiles","","","User make single click on Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.
- Single click on folder.

### Verify that:

- Folder info section appears.
- Folder action bar appears.
"
"passed","Wed Sep 10 02:29:16 UTC 2025","Wed Sep 10 02:30:10 UTC 2025","54476","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `User` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `User` from organization via **CLI**.
"
"passed","Wed Sep 10 02:58:05 UTC 2025","Wed Sep 10 02:59:12 UTC 2025","66969","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager cannot remove himself from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` **cannot** remove himself from organization.
"
"passed","Wed Sep 10 02:59:19 UTC 2025","Wed Sep 10 02:59:56 UTC 2025","37011","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User verifies admin get-projects command output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Run `apolo admin get-projects` command via **CLI**.

### Verify that:

- Valid project info is displayed in command output.
"
"passed","Wed Sep 10 02:44:32 UTC 2025","Wed Sep 10 02:45:38 UTC 2025","66186","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove User from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can remove `User` from organization.
"
"passed","Wed Sep 10 02:11:19 UTC 2025","Wed Sep 10 02:12:19 UTC 2025","59819","UI Tests","UI Files","TestUIFiles","","","User download bin file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `bin` file.

### Verify that:

- User can download `bin` file via UI.
- Downloaded `bin` file md5 hash matches expected file.
"
"passed","Wed Sep 10 02:56:17 UTC 2025","Wed Sep 10 02:58:28 UTC 2025","130734","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite user with organization to organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup second user.
- Pass onboarding for second user and create organization via UI.

### Verify that:

- User can invite to organization another user that already has organization.'
"
"passed","Wed Sep 10 03:07:33 UTC 2025","Wed Sep 10 03:08:37 UTC 2025","63418","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Manager can access organization settings","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that `Manager`:

- Can access organization Settings.
"
"passed","Wed Sep 10 01:43:00 UTC 2025","Wed Sep 10 01:44:08 UTC 2025","67887","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin cannot demote himself to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` **cannot** demote himself to `User`.
"
"passed","Wed Sep 10 03:15:01 UTC 2025","Wed Sep 10 03:16:16 UTC 2025","74701","E2E Tests","Apolo CLI Hello World Job Verification","TestHelloWorldJob","","","Run Hello World Job and Validate UI and CLI Results","
- Login with valid credentials.
- Create new organization via **UI** during onboarding.
- Create new project via **CLI**.
- Run `Hello World` Job via **CLI**.

Verify that:

- Job executed successfully in **CLI**.
- Job is displayed in successful jobs via **UI**.
"
"passed","Wed Sep 10 02:27:48 UTC 2025","Wed Sep 10 02:28:26 UTC 2025","38274","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes Admin from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Admin` role via **CLI**.

### Verify that:

- `Admin` can remove `Admin` from organization via **CLI**.
"
"passed","Wed Sep 10 03:13:57 UTC 2025","Wed Sep 10 03:14:42 UTC 2025","44708","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin remove secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create first secret via **CLI**.
- Create second secret via **CLI**.

### Verify that:

- User can remove second secret via **CLI**.
"
"passed","Wed Sep 10 03:00:41 UTC 2025","Wed Sep 10 03:01:24 UTC 2025","42674","UI Tests","UI Disks","TestUIDisks","","","Create Second Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.

### Verify that:

- User can create second Disk.
"
"passed","Wed Sep 10 02:37:35 UTC 2025","Wed Sep 10 02:38:10 UTC 2025","35110","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes himself from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove `himself` from organization via **CLI**.
"
"failed","Wed Sep 10 02:40:23 UTC 2025","Wed Sep 10 02:41:18 UTC 2025","54622","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","User removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `User` role via **CLI**.
- Add `third user` to organization with `User` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `User` **cannot** remove members from organization via **CLI**.
"
"passed","Wed Sep 10 01:42:39 UTC 2025","Wed Sep 10 01:43:15 UTC 2025","36283","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Writer` via **CLI**.
"
"passed","Wed Sep 10 01:34:51 UTC 2025","Wed Sep 10 01:36:12 UTC 2025","80475","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change User role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can change user role from `User` to `Admin`
- User after changing role from `User` to `Admin`:

- Can access organization `Settings`
- Can access organization `Billing`
"
"passed","Wed Sep 10 01:39:50 UTC 2025","Wed Sep 10 01:41:12 UTC 2025","81756","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Admin role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` can change user role from `Admin` to `User`
- User after changing role from `Admin` to `User`:

- **Cannot** access organization `Settings`.
- **Cannot** access organization `Billing`.
"
"passed","Wed Sep 10 01:44:15 UTC 2025","Wed Sep 10 01:44:52 UTC 2025","37071","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin demote himself to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- `Admin` **cannot** demote himself via **CLI**.
"
"passed","Wed Sep 10 02:13:23 UTC 2025","Wed Sep 10 02:14:09 UTC 2025","46228","UI Tests","UI Files","TestUIFiles","","","User rename File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload txt file.

### Verify that:

- User can rename a file with `Rename` button from File action bar.
"
"passed","Wed Sep 10 02:20:25 UTC 2025","Wed Sep 10 02:21:03 UTC 2025","37838","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can upload `txt` file via **CLI**.
"
"passed","Wed Sep 10 01:54:28 UTC 2025","Wed Sep 10 01:56:21 UTC 2025","113429","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Manager role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` cannot change user role from `Manager` to `Admin`.
"
"passed","Wed Sep 10 02:55:45 UTC 2025","Wed Sep 10 02:57:58 UTC 2025","133200","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager cannot remove Admin from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** remove another `Admin` from organization.
"
"passed","Wed Sep 10 03:03:34 UTC 2025","Wed Sep 10 03:03:57 UTC 2025","22636","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create disk with no project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create disk via CLI if there is no project created yet.
"
"passed","Wed Sep 10 02:53:58 UTC 2025","Wed Sep 10 02:55:01 UTC 2025","62987","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite registered user without organization to organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.

### Verify that:

- User can invite to organization another user that is registered but **doesn't have an organization**.
"
"passed","Wed Sep 10 02:02:42 UTC 2025","Wed Sep 10 02:03:38 UTC 2025","56655","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can remove `Reader` from project via **CLI**.
"
"passed","Wed Sep 10 02:01:04 UTC 2025","Wed Sep 10 02:02:42 UTC 2025","97237","UI Tests","UI Files","TestUIFiles","","","Verify Manager can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` can create new folder.
"
"passed","Wed Sep 10 02:04:17 UTC 2025","Wed Sep 10 02:06:47 UTC 2025","150301","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot promote Reader to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` **cannot** promote `Reader` to `Admins`.
"
"passed","Wed Sep 10 02:48:33 UTC 2025","Wed Sep 10 02:49:46 UTC 2025","72122","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove another Admin from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` can remove another `Admin` from organization.
"
"passed","Wed Sep 10 02:47:30 UTC 2025","Wed Sep 10 02:48:21 UTC 2025","50693","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Create Second Organization via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create second organization.
"
"failed","Wed Sep 10 02:36:24 UTC 2025","Wed Sep 10 02:37:28 UTC 2025","63354","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes Admin from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove `Admin` from organization via **CLI**.
"
"passed","Wed Sep 10 02:27:06 UTC 2025","Wed Sep 10 02:27:59 UTC 2025","52371","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User removes organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create second organization via **CLI**.

### Verify that:

- User can remove organization via **CLI**.
"
"passed","Wed Sep 10 01:36:18 UTC 2025","Wed Sep 10 01:38:24 UTC 2025","126423","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Manager role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:
- `Admin` can change user role from `Manager` to `User`
- User after changing role from `Manager` to `User`:

- **Cannot** access organization `Settings`
- **Cannot** access organization `Billing`
"
"passed","Wed Sep 10 01:33:16 UTC 2025","Wed Sep 10 01:34:45 UTC 2025","88387","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change User role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can change user role from `User` to `Manager`
- User after changing role from `User` to `Manager`:

- Can access organization `Settings`
- Can access organization `Billing`
"
"passed","Wed Sep 10 03:00:50 UTC 2025","Wed Sep 10 03:01:23 UTC 2025","33618","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Switch between projects via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create first project via **CLI**.
- Create second project via **CLI**.

### Verify that:

- User can switch between projects via **CLI**.
"
"passed","Wed Sep 10 01:47:42 UTC 2025","Wed Sep 10 01:49:00 UTC 2025","77908","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Manager to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can demote `Manager` to `Writer`.
"
"passed","Wed Sep 10 02:47:06 UTC 2025","Wed Sep 10 02:48:27 UTC 2025","80847","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove Manager from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Admin` can remove `Manager` from organization.
"
"passed","Wed Sep 10 02:28:39 UTC 2025","Wed Sep 10 02:29:15 UTC 2025","36224","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User switch organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create second organization via **CLI**.

### Verify that:

- User can switch between organizations via **CLI**.
"
"passed","Wed Sep 10 02:18:59 UTC 2025","Wed Sep 10 02:20:23 UTC 2025","83629","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Writer from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can remove `Writer` from project.
"
"passed","Wed Sep 10 02:16:29 UTC 2025","Wed Sep 10 02:17:16 UTC 2025","47290","CLI Tests","CLI Storage","TestCLIStorage","","","Admin create folder without project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create folder if there is **no project created** yet via **CLI**.
"
"passed","Wed Sep 10 01:58:47 UTC 2025","Wed Sep 10 02:00:55 UTC 2025","128641","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Admin role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `Admin` to `Manager`.
"
"passed","Wed Sep 10 01:52:47 UTC 2025","Wed Sep 10 01:53:43 UTC 2025","56297","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Manager` to `Reader` via **CLI**.
"
"passed","Wed Sep 10 03:14:36 UTC 2025","Wed Sep 10 03:16:39 UTC 2025","123583","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify Manager can purchase organization credits with predefined value","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role.

### Verify that:

- `Manager` can purchase credits using predefined value(10, 100, 1000).
"
"passed","Wed Sep 10 03:10:17 UTC 2025","Wed Sep 10 03:11:38 UTC 2025","81136","UI Tests","UI Secrets","TestUISecrets","","","Search Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create Secret.

### Verify that:

- User can Search for secret via UI.
"
"passed","Wed Sep 10 02:22:09 UTC 2025","Wed Sep 10 02:22:52 UTC 2025","43081","CLI Tests","CLI Storage","TestCLIStorage","","","Admin download text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can download `txt` file via **CLI**.
- downloaded `txt` file md5 hash matches expected file.
"
"passed","Wed Sep 10 02:59:19 UTC 2025","Wed Sep 10 02:59:46 UTC 2025","27429","UI Tests","UI Disks","TestUIDisks","","","Create First Disk without project via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User **cannot** create first Disk if **no project created** yet.
"
"passed","Wed Sep 10 02:12:32 UTC 2025","Wed Sep 10 02:13:34 UTC 2025","62686","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Admin from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` cannot remove `Admin` from project via **CLI**.
"
"passed","Wed Sep 10 01:45:47 UTC 2025","Wed Sep 10 01:47:36 UTC 2025","108662","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Manager to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can demote `Manager` to `Reader`.
"
"passed","Wed Sep 10 02:45:04 UTC 2025","Wed Sep 10 02:45:33 UTC 2025","29352","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- DeepSeek app uninstalled.
"
"passed","Wed Sep 10 02:44:05 UTC 2025","Wed Sep 10 02:44:26 UTC 2025","20687","E2E Tests","Shell App","TestE2EShellApp","","","Verify installed Shell app info displayed on the app container via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the Shell app container.
- `Show All` button displayed on the Shell app container.
"
"passed","Wed Sep 10 03:06:43 UTC 2025","Wed Sep 10 03:08:18 UTC 2025","94905","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite member of organization to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization.

### Verify that:

- User can invite member of organization to project.
"
"passed","Wed Sep 10 01:39:27 UTC 2025","Wed Sep 10 01:40:24 UTC 2025","57548","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Writer` via **CLI**.
"
"passed","Wed Sep 10 03:13:24 UTC 2025","Wed Sep 10 03:13:40 UTC 2025","16748","UI Tests","UI Signup","TestUISignup","","","New user successful signup","
### Verify that:

- New user can signup via UI.
"
"passed","Wed Sep 10 03:04:05 UTC 2025","Wed Sep 10 03:04:40 UTC 2025","34720","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create first disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create disk via **CLI**.
"
"passed","Wed Sep 10 03:17:11 UTC 2025","Wed Sep 10 03:17:25 UTC 2025","14403","UI Tests","UI Login","TestUILogin","","","New user successful login","
### Verify that:

- User can login with valid credentials.
"
"passed","Wed Sep 10 03:11:21 UTC 2025","Wed Sep 10 03:11:28 UTC 2025","7373","CLI Tests","CLI Login","TestCLILogin","","","User without organization logs in with auth token via CLI","
- Login with valid credentials **via UI**.
- Get Bearer auth token from Playwright local storage.

### Verify that:

- User can login with Bearer auth token **via CLI**.
- Login output in CLI doesn't contain `organization` and `project`.
"
"passed","Wed Sep 10 01:39:05 UTC 2025","Wed Sep 10 01:40:28 UTC 2025","83430","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote `Reader` to `Admin`.
"
"passed","Wed Sep 10 02:30:09 UTC 2025","Wed Sep 10 02:33:02 UTC 2025","172298","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove Writer from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can remove `Writer` from project.
"
"passed","Wed Sep 10 01:44:03 UTC 2025","Wed Sep 10 01:45:40 UTC 2025","96863","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Writer to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can promote `Writer` to `Admin`.
"
"passed","Wed Sep 10 01:38:36 UTC 2025","Wed Sep 10 01:39:20 UTC 2025","44171","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Reader` via **CLI**.
"
"passed","Wed Sep 10 03:01:31 UTC 2025","Wed Sep 10 03:02:39 UTC 2025","68593","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Add organization member to project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can add organization member to project via **CLI**.
"
"passed","Wed Sep 10 02:15:33 UTC 2025","Wed Sep 10 02:16:21 UTC 2025","48332","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Reader removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Reader` **cannot** remove members from project via **CLI**.
"
"failed","Wed Sep 10 02:54:25 UTC 2025","Wed Sep 10 02:54:55 UTC 2025","30589","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Reader to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` can invite `third user` as `Reader` to a project.
"
"passed","Wed Sep 10 02:17:57 UTC 2025","Wed Sep 10 02:20:05 UTC 2025","128107","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Writer cannot change member roles","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Writer` **cannot** change member roles.
"
"passed","Wed Sep 10 02:24:31 UTC 2025","Wed Sep 10 02:25:19 UTC 2025","47958","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes Manager from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.

### Verify that:

- `Admin` can remove `Manager` from organization via **CLI**.
"
"passed","Wed Sep 10 02:44:57 UTC 2025","Wed Sep 10 02:45:01 UTC 2025","4536","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"passed","Wed Sep 10 02:28:33 UTC 2025","Wed Sep 10 02:29:08 UTC 2025","35539","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes himself from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Admin` **cannot** remove `himself` from organization via **CLI**.
"
"passed","Wed Sep 10 01:41:18 UTC 2025","Wed Sep 10 01:42:52 UTC 2025","93626","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Admin role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with Admin role via **API**.

### Verify that:

- `Admin` can change user role from `Admin` to `Manager`.
- User after changing role from `Admin` to `Manager`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Wed Sep 10 02:05:37 UTC 2025","Wed Sep 10 02:06:26 UTC 2025","49260","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Admin from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can remove another `Admin` from project via **CLI**.
"
"passed","Wed Sep 10 02:19:11 UTC 2025","Wed Sep 10 02:19:39 UTC 2025","28303","CLI Tests","CLI Storage","TestCLIStorage","","","Admin remove folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create new folder via **CLI**.

### Verify that:

- User can remove folder via **CLI**.
"
"passed","Wed Sep 10 02:35:55 UTC 2025","Wed Sep 10 02:38:22 UTC 2025","147151","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager cannot remove Admin from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Admin` role.

### Verify that:

- `Manager` **cannot** remove `Admin` from project.
"
"passed","Wed Sep 10 02:44:48 UTC 2025","Wed Sep 10 02:44:55 UTC 2025","6215","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify Installed apps details info via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- DeepSeek app Details info is valid.
"
"failed","Wed Sep 10 02:32:45 UTC 2025","Wed Sep 10 02:33:47 UTC 2025","62276","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes Manager from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Manager` from organization via **CLI**.
"
"passed","Wed Sep 10 01:56:29 UTC 2025","Wed Sep 10 01:58:39 UTC 2025","130442","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Admin role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `Admin` to `User`.
"
"passed","Wed Sep 10 03:08:44 UTC 2025","Wed Sep 10 03:09:24 UTC 2025","40425","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Manager can access organization billing","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that `Manager`:

- Can access organization Billing.
"
"passed","Wed Sep 10 02:55:07 UTC 2025","Wed Sep 10 02:56:10 UTC 2025","62915","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite registered user without organization to organization with default project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project with `default` option.
- Signup `second user`.

### Verify that:

- User can invite to organization another user that is registered but **doesn't have organization**.
- Newly invited user is member of the `default` project.
"
"passed","Wed Sep 10 01:43:23 UTC 2025","Wed Sep 10 01:44:07 UTC 2025","44072","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Manager` via **CLI**.
"
"passed","Wed Sep 10 01:59:47 UTC 2025","Wed Sep 10 02:00:58 UTC 2025","71122","UI Tests","UI Files","TestUIFiles","","","Verify Writer can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Writer` can create new folder.
"
"passed","Wed Sep 10 02:19:46 UTC 2025","Wed Sep 10 02:20:18 UTC 2025","31700","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload file without project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** upload file if there is **no project created** yet via **CLI**.
"
"passed","Wed Sep 10 02:01:21 UTC 2025","Wed Sep 10 02:04:10 UTC 2025","169128","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Reader to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can promote `Reader` to `Manager`.
"
"passed","Wed Sep 10 03:12:16 UTC 2025","Wed Sep 10 03:13:02 UTC 2025","45440","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create first secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can create first secret via **CLI**.
"
"passed","Wed Sep 10 03:04:48 UTC 2025","Wed Sep 10 03:05:50 UTC 2025","61891","UI Tests","UI Disks","TestUIDisks","","","Delete Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.

### Verify that:

- User can delete Disk.
"
"passed","Wed Sep 10 02:22:48 UTC 2025","Wed Sep 10 02:23:29 UTC 2025","41051","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `User` role via **CLI**.

### Verify that:

- `Admin` can remove `User` from organization via **CLI**.
"
"passed","Wed Sep 10 01:40:36 UTC 2025","Wed Sep 10 01:42:36 UTC 2025","120040","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Writer to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can demote `Writer` to `Reader`.
"
