"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Thu Oct 09 02:12:32 UTC 2025","Thu Oct 09 02:14:28 UTC 2025","115554","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Admin role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `Admin` to `User`.
"
"passed","Thu Oct 09 02:39:48 UTC 2025","Thu Oct 09 02:42:05 UTC 2025","136766","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Reader cannot change member roles","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Reader` **cannot** change member roles.
"
"failed","Thu Oct 09 03:15:26 UTC 2025","Thu Oct 09 03:17:02 UTC 2025","96564","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Reader cannot modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Reader` **doesn't** have access to modify Files.
"
"passed","Thu Oct 09 03:49:58 UTC 2025","Thu Oct 09 03:50:50 UTC 2025","51714","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify User cannot purchase credits via top pane","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role.

### Verify that:

- `User` **cannot** purchase credits via top pane.
"
"passed","Thu Oct 09 02:52:54 UTC 2025","Thu Oct 09 02:53:32 UTC 2025","37107","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Invite user to org via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second` user via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.

### Verify that:

- User can invite registered user to organization via **CLI**.
"
"passed","Thu Oct 09 01:49:50 UTC 2025","Thu Oct 09 01:50:44 UTC 2025","53425","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Writer` via **CLI**.
"
"passed","Thu Oct 09 02:04:58 UTC 2025","Thu Oct 09 02:07:45 UTC 2025","167134","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Reader to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can promote `Reader` to `Writer`.
"
"passed","Thu Oct 09 02:22:11 UTC 2025","Thu Oct 09 02:23:02 UTC 2025","50457","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Admin from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can remove another `Admin` from project via **CLI**.
"
"skipped","Thu Oct 09 01:35:10 UTC 2025","Thu Oct 09 01:35:10 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output API schemas is valid via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- API sections data matching expected data format.
"
"passed","Thu Oct 09 03:22:51 UTC 2025","Thu Oct 09 03:24:12 UTC 2025","81841","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` has access to modify Files.
"
"passed","Thu Oct 09 03:43:41 UTC 2025","Thu Oct 09 03:44:15 UTC 2025","34019","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create second disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can create second disk via **CLI**.
"
"skipped","Thu Oct 09 01:41:05 UTC 2025","Thu Oct 09 01:41:05 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- PostgreSQL app uninstalled.
"
"passed","Thu Oct 09 02:32:45 UTC 2025","Thu Oct 09 02:33:35 UTC 2025","50390","UI Tests","UI Files","TestUIFiles","","","User upload bin file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can upload `bin` file via UI.
"
"passed","Thu Oct 09 01:47:32 UTC 2025","Thu Oct 09 01:48:51 UTC 2025","78776","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Admin` via **CLI**.
"
"passed","Thu Oct 09 01:54:37 UTC 2025","Thu Oct 09 01:56:02 UTC 2025","85157","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Manager role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:
- `Admin` can change user role from `Manager` to `User`
- User after changing role from `Manager` to `User`:

- **Cannot** access organization `Settings`
- **Cannot** access organization `Billing`
"
"passed","Thu Oct 09 03:50:57 UTC 2025","Thu Oct 09 03:52:51 UTC 2025","114294","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify Manager can purchase organization credits with predefined value","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role.

### Verify that:

- `Manager` can purchase credits using predefined value(10, 100, 1000).
"
"passed","Thu Oct 09 02:35:36 UTC 2025","Thu Oct 09 02:36:09 UTC 2025","32238","CLI Tests","CLI Storage","TestCLIStorage","","","Admin create folder without project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create folder if there is **no project created** yet via **CLI**.
"
"passed","Thu Oct 09 01:37:14 UTC 2025","Thu Oct 09 01:38:02 UTC 2025","47202","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Manager` via **CLI**.
"
"passed","Thu Oct 09 03:44:24 UTC 2025","Thu Oct 09 03:45:35 UTC 2025","70720","CLI Tests","CLI Disks","TestCLIDisks","","","Admin get disk by ID via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can get disk info by disk ID via **CLI**.
"
"passed","Thu Oct 09 02:40:27 UTC 2025","Thu Oct 09 02:41:32 UTC 2025","64878","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can upload `txt` file via **CLI**.
"
"skipped","Thu Oct 09 01:34:58 UTC 2025","Thu Oct 09 01:34:58 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify installed DeepSeek app info displayed on the app container via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the DeepSeek app container.
- `Show All` button displayed on the DeepSeek app container.
"
"passed","Thu Oct 09 03:40:27 UTC 2025","Thu Oct 09 03:42:20 UTC 2025","112939","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite member that NOT in organization to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- DO NOT invite `second user` to organization.

### Verify that:

- User **cannot** invite to project another user which is **not member of organization**.
"
"passed","Thu Oct 09 03:42:46 UTC 2025","Thu Oct 09 03:43:46 UTC 2025","59410","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited User access","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that `User`:

- **Cannot** access organization Settings.
- **Cannot** access organization Billing.
- **Cannot** invite member to organization.
- **Cannot** edit organization members.
- **Cannot** delete members from organization.
"
"passed","Thu Oct 09 03:34:14 UTC 2025","Thu Oct 09 03:36:08 UTC 2025","113870","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Manager to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- Manager can invite `third user` as `Manager` to a project.
"
"passed","Thu Oct 09 03:50:44 UTC 2025","Thu Oct 09 03:51:31 UTC 2025","47237","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin remove secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create first secret via **CLI**.
- Create second secret via **CLI**.

### Verify that:

- User can remove second secret via **CLI**.
"
"passed","Thu Oct 09 01:53:03 UTC 2025","Thu Oct 09 01:54:25 UTC 2025","82128","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Manager to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can demote `Manager` to `Writer`.
"
"passed","Thu Oct 09 03:10:41 UTC 2025","Thu Oct 09 03:11:43 UTC 2025","62302","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager cannot remove himself from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` **cannot** remove himself from organization.
"
"passed","Thu Oct 09 02:51:09 UTC 2025","Thu Oct 09 02:51:35 UTC 2025","26363","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User verifies config show output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Run `apolo config show` command via **CLI**.

### Verify that:

- `apolo config show` command output is valid.
"
"passed","Thu Oct 09 03:01:00 UTC 2025","Thu Oct 09 03:01:44 UTC 2025","43525","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","User removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `User` role via **CLI**.
- Add `third user` to organization with `User` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `User` **cannot** remove members from organization via **CLI**.
"
"passed","Thu Oct 09 03:54:43 UTC 2025","Thu Oct 09 03:55:51 UTC 2025","68713","E2E Tests","Apolo CLI Hello World Job Verification","TestHelloWorldJob","","","Run Hello World Job and Validate UI and CLI Results","
- Login with valid credentials.
- Create new organization via **UI** during onboarding.
- Create new project via **CLI**.
- Run `Hello World` Job via **CLI**.

Verify that:

- Job executed successfully in **CLI**.
- Job is displayed in successful jobs via **UI**.
"
"passed","Thu Oct 09 03:45:18 UTC 2025","Thu Oct 09 03:45:52 UTC 2025","34256","UI Tests","UI Secrets","TestUISecrets","","","Create First Secret without project via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User **cannot** create first Secret if **no project created** yet.
"
"failed","Thu Oct 09 01:41:10 UTC 2025","Thu Oct 09 01:42:10 UTC 2025","60436","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Export PostgreSQL app config via UI","
 Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Select the Preset `cpu-medium`
- Set PGbouncer.replicas to `1`
- Set Postgres Configuration.Instance replicas to `1`
- Click on Database Users `Add Entry`
- Enter Database `user name`
- Enter Database `name`
- Select PG Bouncer.Resource Preset `cpu-medium`
- Click `Export config` button.

### Verify that:

- Config downloaded as `yaml` file matches expected schema.
- Exported config contains valid data.
"
"failed","Thu Oct 09 03:23:59 UTC 2025","Thu Oct 09 03:24:48 UTC 2025","48405","UI Tests","UI Disks","TestUIDisks","","","Create First Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create first Disk after project created.
"
"failed","Thu Oct 09 02:27:33 UTC 2025","Thu Oct 09 02:29:36 UTC 2025","123570","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot promote Writer to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` **cannot** promote `Writer` to `Admin`.
"
"skipped","Thu Oct 09 02:30:56 UTC 2025","Thu Oct 09 02:31:42 UTC 2025","46163","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes himself from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove himself from project via **CLI**.
"
"failed","Thu Oct 09 02:29:27 UTC 2025","Thu Oct 09 02:30:32 UTC 2025","64400","UI Tests","UI Files","TestUIFiles","","","User rename Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.

### Verify that:

- User can rename a folder with `Rename` button from File action bar.
"
"passed","Thu Oct 09 02:29:19 UTC 2025","Thu Oct 09 02:30:16 UTC 2025","57244","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Admin from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` cannot remove `Admin` from project via **CLI**.
"
"passed","Thu Oct 09 03:46:54 UTC 2025","Thu Oct 09 03:47:46 UTC 2025","52251","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Admin can access organization billing","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that `Admin`:

- Can access organization Billing.
"
"passed","Thu Oct 09 03:06:29 UTC 2025","Thu Oct 09 03:08:03 UTC 2025","94313","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Set default organization credits via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can set default organization credits.
"
"passed","Thu Oct 09 02:43:29 UTC 2025","Thu Oct 09 02:43:57 UTC 2025","27586","CLI Tests","CLI Storage","TestCLIStorage","","","Admin download text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can download `txt` file via **CLI**.
- downloaded `txt` file md5 hash matches expected file.
"
"passed","Thu Oct 09 02:28:19 UTC 2025","Thu Oct 09 02:29:11 UTC 2025","51720","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Manager from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove another `Manager` from project via **CLI**.
"
"passed","Thu Oct 09 03:56:47 UTC 2025","Thu Oct 09 03:58:00 UTC 2025","73235","UI Tests","UI Signup","TestUISignup","","","Invite not registered user to organization with default project via UI","
- Login with valid credentials.
- Create new organization.
- Create project with `default` option.
- Invite **not registered** user to organization.

### Verify that:

- Newly invited user automatically is member of default project.
"
"passed","Thu Oct 09 02:42:13 UTC 2025","Thu Oct 09 02:43:47 UTC 2025","93486","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Reader from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can remove `Reader` from `project`.
"
"passed","Thu Oct 09 02:32:19 UTC 2025","Thu Oct 09 02:33:45 UTC 2025","85905","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Writer removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Writer` **cannot** remove members from project via **CLI**.
"
"passed","Thu Oct 09 02:05:46 UTC 2025","Thu Oct 09 02:08:01 UTC 2025","134900","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change User role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `User` to `Admin`.
"
"passed","Thu Oct 09 02:44:04 UTC 2025","Thu Oct 09 02:45:10 UTC 2025","65919","CLI Tests","CLI Storage","TestCLIStorage","","","Admin download bin file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `bin` file via **CLI**.

### Verify that:

- User can download `bin` file via **CLI**.
- downloaded `bin` file md5 hash matches expected file.
"
"passed","Thu Oct 09 01:39:39 UTC 2025","Thu Oct 09 01:41:01 UTC 2025","81628","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote `Reader` to `Admin`.
"
"passed","Thu Oct 09 02:54:28 UTC 2025","Thu Oct 09 02:55:09 UTC 2025","40406","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User verifies admin get-org-users output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Invite `second user` to organization via **CLI**.
- Run `apolo admin get-org-users` command via **CLI**.

### Verify that:

- Organization members are listed with valid data in command output.
"
"passed","Thu Oct 09 03:27:00 UTC 2025","Thu Oct 09 03:29:14 UTC 2025","134369","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Writer to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` can invite `third user` as `Writer` to a project.
"
"passed","Thu Oct 09 03:20:47 UTC 2025","Thu Oct 09 03:21:19 UTC 2025","32044","UI Tests","UI Disks","TestUIDisks","","","Create First Disk without project via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User **cannot** create first Disk if **no project created** yet.
"
"passed","Thu Oct 09 02:37:26 UTC 2025","Thu Oct 09 02:38:05 UTC 2025","38869","CLI Tests","CLI Storage","TestCLIStorage","","","Admin rename folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create new folder via **CLI**.

### Verify that:

- User can rename folder via **CLI**.
"
"passed","Thu Oct 09 03:57:59 UTC 2025","Thu Oct 09 03:58:12 UTC 2025","13416","UI Tests","UI Login","TestUILogin","","","New user successful login","
### Verify that:

- User can login with valid credentials.
"
"passed","Thu Oct 09 02:02:45 UTC 2025","Thu Oct 09 02:03:40 UTC 2025","55396","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Manager` to `Reader` via **CLI**.
"
"passed","Thu Oct 09 02:46:01 UTC 2025","Thu Oct 09 02:47:36 UTC 2025","94117","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Manager from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can remove `Manager` from project.
"
"failed","Thu Oct 09 02:54:34 UTC 2025","Thu Oct 09 02:55:04 UTC 2025","30695","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes Admin from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Admin` role via **CLI**.

### Verify that:

- `Admin` can remove `Admin` from organization via **CLI**.
"
"passed","Thu Oct 09 01:53:28 UTC 2025","Thu Oct 09 01:54:53 UTC 2025","84845","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Reader` to `Writer` via **CLI**.
"
"passed","Thu Oct 09 01:55:05 UTC 2025","Thu Oct 09 01:56:32 UTC 2025","86525","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Manager to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can promote `Manager` to `Admin`.
"
"failed","Thu Oct 09 03:37:23 UTC 2025","Thu Oct 09 03:38:10 UTC 2025","47120","UI Tests","UI Disks","TestUIDisks","","","Open Disk info view by click on disk button","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.

### Verify that:

- After click on disk button Disk info view appears.
"
"skipped","Thu Oct 09 01:40:53 UTC 2025","Thu Oct 09 01:40:53 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output user data schemas is valid via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- User data sections data matching expected data format.
"
"passed","Thu Oct 09 03:26:35 UTC 2025","Thu Oct 09 03:27:15 UTC 2025","40504","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Add user not in organization to project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User **cannot** add registered user **not from organization** to project via **CLI**.
"
"passed","Thu Oct 09 02:57:58 UTC 2025","Thu Oct 09 02:58:54 UTC 2025","56654","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes Manager from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Manager` from organization via **CLI**.
"
"passed","Thu Oct 09 03:14:49 UTC 2025","Thu Oct 09 03:15:55 UTC 2025","66970","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite registered user without organization to organization with default project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project with `default` option.
- Signup `second user`.

### Verify that:

- User can invite to organization another user that is registered but **doesn't have organization**.
- Newly invited user is member of the `default` project.
"
"skipped","Thu Oct 09 01:47:16 UTC 2025","Thu Oct 09 01:47:16 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- Shell app uninstalled.
"
"passed","Thu Oct 09 03:51:39 UTC 2025","Thu Oct 09 03:51:58 UTC 2025","18339","UI Tests","UI Signup","TestUISignup","","","New user successful signup","
### Verify that:

- New user can signup via UI.
"
"passed","Thu Oct 09 03:49:35 UTC 2025","Thu Oct 09 03:50:46 UTC 2025","70331","UI Tests","UI Secrets","TestUISecrets","","","Create Second Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create Secret.

### Verify that:

- User can create second Secret.
"
"skipped","Thu Oct 09 01:40:44 UTC 2025","Thu Oct 09 01:40:44 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on PostgreSQL App container.

### Verify that:

- PostgreSQL app displayed in Installed Apps.
"
"skipped","Thu Oct 09 01:35:22 UTC 2025","Thu Oct 09 01:35:22 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy GET external Chat API /v1/models returns valid data","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET `external` OpenAI Compatible Chat API `{hostname}/v1/models`.

### Verify that:

- API response contains valid data.
"
"passed","Thu Oct 09 02:39:07 UTC 2025","Thu Oct 09 02:39:51 UTC 2025","43799","UI Tests","UI Files","TestUIFiles","","","User download txt file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `txt` file.

### Verify that:

- User can download `txt` file via UI.
- Downloaded `txt` file md5 hash matches expected file.
"
"passed","Thu Oct 09 01:44:27 UTC 2025","Thu Oct 09 01:45:23 UTC 2025","55918","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Reader` via **CLI**.
"
"passed","Thu Oct 09 01:53:16 UTC 2025","Thu Oct 09 01:54:27 UTC 2025","70610","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change User role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can change user role from `User` to `Admin`
- User after changing role from `User` to `Admin`:

- Can access organization `Settings`
- Can access organization `Billing`
"
"passed","Thu Oct 09 02:45:50 UTC 2025","Thu Oct 09 02:46:36 UTC 2025","46127","CLI Tests","CLI Storage","TestCLIStorage","","","Admin rename text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can rename `txt` file via **CLI**.
"
"passed","Thu Oct 09 02:14:34 UTC 2025","Thu Oct 09 02:16:25 UTC 2025","111240","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Admin role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `Admin` to `Manager`.
"
"skipped","Thu Oct 09 01:47:11 UTC 2025","Thu Oct 09 01:47:11 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Open Shell application via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.
- Get `external https` endpoint.

### Verify that:

- Shell app can be launched via UI.
"
"passed","Thu Oct 09 01:35:48 UTC 2025","Thu Oct 09 01:36:00 UTC 2025","11681","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Import DeepSeek app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Import DeepSeek app config via UI.

### Verify that:

- Install required data is the same as in imported config.
"
"passed","Thu Oct 09 02:00:31 UTC 2025","Thu Oct 09 02:01:25 UTC 2025","53775","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Writer` to `Manager` via **CLI**.
"
"passed","Thu Oct 09 03:30:43 UTC 2025","Thu Oct 09 03:31:11 UTC 2025","27627","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create First Project from main page via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create first project in organization from **the main page**.
"
"passed","Thu Oct 09 01:37:48 UTC 2025","Thu Oct 09 01:39:32 UTC 2025","103605","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote `Reader` to `Manager`.
"
"passed","Thu Oct 09 03:52:06 UTC 2025","Thu Oct 09 03:53:19 UTC 2025","72532","UI Tests","UI Signup","TestUISignup","","","Invite not registered user as user to organization","
- Login with valid credentials.
- Create new organization.

### Verify that:

- User can invite **not registered** user to organization.
"
"passed","Thu Oct 09 03:01:52 UTC 2025","Thu Oct 09 03:03:12 UTC 2025","80819","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove another Admin from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` can remove another `Admin` from organization.
"
"passed","Thu Oct 09 02:09:30 UTC 2025","Thu Oct 09 02:10:22 UTC 2025","51915","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Writer change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Writer` **cannot** change member project roles via **CLI**.
"
"skipped","Thu Oct 09 01:34:51 UTC 2025","Thu Oct 09 01:34:51 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify event list of installed DeepSeek app via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET '/events' endpoint.

### Verify that:

- App events list contains states queued, progressing and healthy.
"
"passed","Thu Oct 09 02:15:54 UTC 2025","Thu Oct 09 02:17:26 UTC 2025","92355","UI Tests","UI Files","TestUIFiles","","","Verify Manager can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` can create new folder.
"
"passed","Thu Oct 09 03:01:52 UTC 2025","Thu Oct 09 03:02:56 UTC 2025","63261","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Create First Organization via UI","
- Login with valid credentials.

### Verify that:

- User can create first organization during onboarding.
"
"passed","Thu Oct 09 02:47:23 UTC 2025","Thu Oct 09 02:48:26 UTC 2025","62357","UI Tests","UI Files","TestUIFiles","","","User delete File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `txt` file.

### Verify that:

- User can delete a file with Delete button from File action bar.
"
"passed","Thu Oct 09 03:20:17 UTC 2025","Thu Oct 09 03:22:00 UTC 2025","102289","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User creates a second project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create first project via **CLI**.

### Verify that:

- User can create second project via **CLI**.
"
"passed","Thu Oct 09 02:13:51 UTC 2025","Thu Oct 09 02:15:15 UTC 2025","84395","UI Tests","UI Files","TestUIFiles","","","Verify Writer can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Writer` can create new folder.
"
"passed","Thu Oct 09 03:00:56 UTC 2025","Thu Oct 09 03:03:39 UTC 2025","162698","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove Writer from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can remove `Writer` from project.
"
"passed","Thu Oct 09 03:05:34 UTC 2025","Thu Oct 09 03:06:21 UTC 2025","46530","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Switch between organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create second organization via UI.

### Verify that:

- User can switch between organizations.
"
"failed","Thu Oct 09 01:38:30 UTC 2025","Thu Oct 09 01:40:34 UTC 2025","124233","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Install PostgreSQL app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Select the Preset `cpu-medium`
- Set PGbouncer.replicas to `1`
- Set Postgres Configuration.Instance replicas to `1`
- Click on Database Users `Add Entry`
- Enter Database `user name`
- Enter Database `name`
- Select PG Bouncer.Resource Preset `cpu-medium`

### Verify that:

- User can install `PostgreSQL` app via **UI**.
"
"passed","Thu Oct 09 03:18:38 UTC 2025","Thu Oct 09 03:19:40 UTC 2025","61462","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User verifies admin get-projects command output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Run `apolo admin get-projects` command via **CLI**.

### Verify that:

- Valid project info is displayed in command output.
"
"failed","Thu Oct 09 03:41:24 UTC 2025","Thu Oct 09 03:42:16 UTC 2025","52614","UI Tests","UI Disks","TestUIDisks","","","Delete Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.

### Verify that:

- User can delete Disk.
"
"passed","Thu Oct 09 02:19:26 UTC 2025","Thu Oct 09 02:20:26 UTC 2025","60162","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Writer from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can remove `Writer` from project via **CLI**.
"
"skipped","Thu Oct 09 01:40:48 UTC 2025","Thu Oct 09 01:40:48 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"passed","Thu Oct 09 03:48:50 UTC 2025","Thu Oct 09 03:49:51 UTC 2025","61694","CLI Tests","CLI Login","TestCLILogin","","","User with organization and project logs in with auth token via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create organization via API.
- Create project via API.

### Verify that:

- User can login with Bearer auth token via CLI.
- Login output in CLI contain valid organization and project.
"
"passed","Thu Oct 09 01:35:32 UTC 2025","Thu Oct 09 01:35:46 UTC 2025","13859","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Export DeepSeek app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Create Secret with token for HuggingFace token via API.
- Select Secret.
- Select HuggingFace model.
- Enter app Display name.
- Click `Export config` button.

### Verify that:

- Config downloaded as `yaml` file matches expected schema.
- Exported config contains valid data.
"
"skipped","Thu Oct 09 01:47:14 UTC 2025","Thu Oct 09 01:47:14 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Enter command in Shell app via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.
- Get `external https` endpoint.
- Launch Shell app.
- Execute `apolo config show` command.

### Verify that Shell app output contains:

- executed command `apolo config show`.
- `User configuration` section.
- `Resource Preset` section.
"
"passed","Thu Oct 09 03:48:06 UTC 2025","Thu Oct 09 03:49:16 UTC 2025","69400","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create first secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can create first secret via **CLI**.
"
"passed","Thu Oct 09 03:47:38 UTC 2025","Thu Oct 09 03:48:00 UTC 2025","21293","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create secret with no project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create secret if there is no project created via **CLI**.
"
"passed","Thu Oct 09 02:51:43 UTC 2025","Thu Oct 09 02:52:46 UTC 2025","62621","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User switch organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create second organization via **CLI**.

### Verify that:

- User can switch between organizations via **CLI**.
"
"skipped","Thu Oct 09 01:34:56 UTC 2025","Thu Oct 09 01:34:56 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can reach DeepSeek app Details page from Installed Apps page","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `DeepSeek app Details` page displayed.
"
"passed","Thu Oct 09 03:24:41 UTC 2025","Thu Oct 09 03:25:58 UTC 2025","77146","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Add organization member to project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can add organization member to project via **CLI**.
"
"skipped","Thu Oct 09 01:40:58 UTC 2025","Thu Oct 09 01:40:58 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output endpoints schema via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that:

- API endpoints data matching expected json schema.
"
"skipped","Thu Oct 09 01:35:27 UTC 2025","Thu Oct 09 01:35:27 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- DeepSeek app uninstalled.
"
"skipped","Thu Oct 09 01:35:08 UTC 2025","Thu Oct 09 01:35:08 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output contains required endpoints via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Http OpenAI Compatible Chat API
- Https OpenAI Compatible Chat API
- Http OpenAI Compatible Embeddings API
- Https OpenAI Compatible Embeddings API
"
"passed","Thu Oct 09 02:01:51 UTC 2025","Thu Oct 09 02:03:04 UTC 2025","72910","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin cannot demote himself to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` cannot demote himself to `Manager`.
"
"passed","Thu Oct 09 01:59:17 UTC 2025","Thu Oct 09 02:00:38 UTC 2025","81322","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Writer`.
"
"passed","Thu Oct 09 01:41:28 UTC 2025","Thu Oct 09 01:42:48 UTC 2025","80130","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Manager` via **CLI**.
"
"skipped","Thu Oct 09 01:34:54 UTC 2025","Thu Oct 09 01:34:54 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify installed DeepSeek app listed in Installed apps via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- DeepSeek app displayed in Installed Apps.
"
"passed","Thu Oct 09 02:47:46 UTC 2025","Thu Oct 09 02:49:14 UTC 2025","87968","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove another Admin from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can remove another `Admin` from project.
"
"passed","Thu Oct 09 02:58:42 UTC 2025","Thu Oct 09 03:00:08 UTC 2025","86029","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove User from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can remove `User` from organization.
"
"skipped","Thu Oct 09 01:40:46 UTC 2025","Thu Oct 09 01:40:46 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify PostgreSQL app details info via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- PostgreSQL app Details info is valid.
"
"passed","Thu Oct 09 02:34:35 UTC 2025","Thu Oct 09 02:36:55 UTC 2025","140306","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Writer cannot change member roles","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Writer` **cannot** change member roles.
"
"failed","Thu Oct 09 03:36:57 UTC 2025","Thu Oct 09 03:38:06 UTC 2025","68432","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create second project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create second project in organization.
"
"passed","Thu Oct 09 03:38:17 UTC 2025","Thu Oct 09 03:39:49 UTC 2025","91912","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite member of organization to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization.

### Verify that:

- User can invite member of organization to project.
"
"skipped","Thu Oct 09 01:40:37 UTC 2025","Thu Oct 09 01:40:37 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify installed PostgreSQL app listed in Installed apps via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- PostgreSQL app displayed in Installed Apps.
"
"skipped","Thu Oct 09 01:41:00 UTC 2025","Thu Oct 09 01:41:00 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify PostgreSQL client installation in Shell app via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Install Shell app.
- Open Shell app.
- Install `postgresql-client` in Shell app.

### Verify that:

- `postgresql-client` packet is installed successfully.
"
"passed","Thu Oct 09 01:56:09 UTC 2025","Thu Oct 09 01:57:22 UTC 2025","73651","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Manager role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:
- `Admin` can change user role from `Manager` to `Admin`
- User after changing role from `Manager` to `Admin`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Thu Oct 09 01:49:28 UTC 2025","Thu Oct 09 01:50:39 UTC 2025","70672","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Writer to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can promote `Writer` to `Admin`.
"
"passed","Thu Oct 09 03:39:41 UTC 2025","Thu Oct 09 03:41:50 UTC 2025","128907","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager cannot invite Admin to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` **cannot** invite `third user` as `Admin` to a project.
"
"failed","Thu Oct 09 01:33:57 UTC 2025","Thu Oct 09 01:34:51 UTC 2025","54224","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Install DeepSeek app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can install `DeepSeek` app via **UI**.
"
"passed","Thu Oct 09 01:58:47 UTC 2025","Thu Oct 09 01:59:53 UTC 2025","65386","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Writer` to `Reader` via **CLI**.
"
"passed","Thu Oct 09 02:55:41 UTC 2025","Thu Oct 09 02:58:23 UTC 2025","162588","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove Reader from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can remove `Reader` from project.
"
"skipped","Thu Oct 09 01:40:39 UTC 2025","Thu Oct 09 01:40:39 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify User can reach PostgreSQL app Details page from Installed Apps page","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `PostgreSQL app Details` page displayed.
"
"failed","Thu Oct 09 01:37:01 UTC 2025","Thu Oct 09 01:37:42 UTC 2025","41132","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote Reader to `Writer`.
"
"passed","Thu Oct 09 01:42:56 UTC 2025","Thu Oct 09 01:44:20 UTC 2025","83620","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Admin` via **CLI**.
"
"failed","Thu Oct 09 03:32:45 UTC 2025","Thu Oct 09 03:33:35 UTC 2025","50238","UI Tests","UI Disks","TestUIDisks","","","Search Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.
- Create second Disk.

### Verify that:

- User can search for Disk via UI with the `Search` field.
"
"passed","Thu Oct 09 02:38:16 UTC 2025","Thu Oct 09 02:38:59 UTC 2025","42942","UI Tests","UI Files","TestUIFiles","","","User download bin file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `bin` file.

### Verify that:

- User can download `bin` file via UI.
- Downloaded `bin` file md5 hash matches expected file.
"
"skipped","Thu Oct 09 01:35:05 UTC 2025","Thu Oct 09 01:35:05 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"passed","Thu Oct 09 03:04:43 UTC 2025","Thu Oct 09 03:06:44 UTC 2025","121185","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager can remove User from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` can remove `User` from organization.
"
"failed","Thu Oct 09 02:43:08 UTC 2025","Thu Oct 09 02:44:08 UTC 2025","59266","UI Tests","UI Files","TestUIFiles","","","User rename File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload txt file.

### Verify that:

- User can rename a file with `Rename` button from File action bar.
"
"passed","Thu Oct 09 01:48:58 UTC 2025","Thu Oct 09 01:49:42 UTC 2025","44222","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Reader` via **CLI**.
"
"skipped","Thu Oct 09 01:47:09 UTC 2025","Thu Oct 09 01:47:09 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output endpoints schema via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that:

- API endpoints data matching expected json schema.
"
"passed","Thu Oct 09 03:48:09 UTC 2025","Thu Oct 09 03:48:42 UTC 2025","33568","CLI Tests","CLI Login","TestCLILogin","","","User with organization logs in with auth token via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create organization via **API**.

### Verify that:

- User can login with Bearer auth token via **CLI**.
- Login output in CLI valid `organization` and no `project` info.
"
"passed","Thu Oct 09 02:49:03 UTC 2025","Thu Oct 09 02:49:55 UTC 2025","52408","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User creates a second organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.

### Verify that:

- User can create second organization via **CLI**.
"
"passed","Thu Oct 09 01:55:02 UTC 2025","Thu Oct 09 01:56:26 UTC 2025","83929","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Reader` to `Manager` via **CLI**.
"
"skipped","Thu Oct 09 01:35:20 UTC 2025","Thu Oct 09 01:35:20 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy GET external Chat API /docs returns Swagger page","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET `external` OpenAI Compatible Chat API `{hostname}/docs link`.

### Verify that:

- Swagger page is returned.
"
"passed","Thu Oct 09 03:22:37 UTC 2025","Thu Oct 09 03:24:02 UTC 2025","85035","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Switch between projects via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create first project via **CLI**.
- Create second project via **CLI**.

### Verify that:

- User can switch between projects via **CLI**.
"
"passed","Thu Oct 09 03:51:24 UTC 2025","Thu Oct 09 03:52:31 UTC 2025","67194","UI Tests","UI Secrets","TestUISecrets","","","Search Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create Secret.

### Verify that:

- User can Search for secret via UI.
"
"passed","Thu Oct 09 03:14:16 UTC 2025","Thu Oct 09 03:15:43 UTC 2025","87286","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager cannot remove himself from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` **cannot** remove himself from project.
"
"passed","Thu Oct 09 02:01:33 UTC 2025","Thu Oct 09 02:02:36 UTC 2025","63286","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Writer` to `Admin` via **CLI**.
"
"skipped","Thu Oct 09 01:47:02 UTC 2025","Thu Oct 09 01:47:02 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output contains required endpoints via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Http internal API
- Https external API
"
"passed","Thu Oct 09 03:03:03 UTC 2025","Thu Oct 09 03:03:38 UTC 2025","34255","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Create Second Organization via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create second organization.
"
"skipped","Thu Oct 09 01:46:57 UTC 2025","Thu Oct 09 01:46:57 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify Installed apps details info via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- Shell app Details info is valid.
"
"skipped","Thu Oct 09 01:46:45 UTC 2025","Thu Oct 09 01:46:45 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify event list of installed Shell app via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- GET '/events' endpoint.

### Verify that:

- App events list contains states queued, progressing and healthy.
"
"passed","Thu Oct 09 02:10:32 UTC 2025","Thu Oct 09 02:12:24 UTC 2025","111703","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Manager role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` cannot change user role from `Manager` to `Admin`.
"
"passed","Thu Oct 09 03:18:03 UTC 2025","Thu Oct 09 03:18:30 UTC 2025","27093","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User creates a first project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create first project via **CLI**.
"
"passed","Thu Oct 09 03:55:40 UTC 2025","Thu Oct 09 03:56:38 UTC 2025","58278","UI Tests","UI Secrets","TestUISecrets","","","Delete Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create Secret.

### Verify that:

- User can delete Secret.
"
"passed","Thu Oct 09 02:00:24 UTC 2025","Thu Oct 09 02:01:43 UTC 2025","78747","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin cannot demote himself to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` **cannot** demote himself to `User`.
"
"passed","Thu Oct 09 02:03:30 UTC 2025","Thu Oct 09 02:04:52 UTC 2025","81744","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Manager`.
"
"passed","Thu Oct 09 03:32:38 UTC 2025","Thu Oct 09 03:33:17 UTC 2025","39579","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create First Project from top pane of main via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create first project in organization from project menu in the **top pane of the main page**.
"
"passed","Thu Oct 09 02:29:44 UTC 2025","Thu Oct 09 02:32:08 UTC 2025","143553","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot demote Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Admin` role.

### Verify that:

- `Manager` **cannot** demote `Admin` to `Manager`.
"
"passed","Thu Oct 09 01:57:10 UTC 2025","Thu Oct 09 01:58:39 UTC 2025","89348","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Reader`.
"
"skipped","Thu Oct 09 01:35:15 UTC 2025","Thu Oct 09 01:35:15 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output endpoints schema via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that:

- API endpoints data matching expected json schema.
"
"passed","Thu Oct 09 01:35:07 UTC 2025","Thu Oct 09 01:36:37 UTC 2025","90026","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Writer` via **CLI**.
"
"skipped","Thu Oct 09 01:35:17 UTC 2025","Thu Oct 09 01:35:17 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy GET external Chat API returns 404","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET `external` OpenAI Compatible Chat API `hostname` link.

### Verify that:

- API response status is 404.
"
"passed","Thu Oct 09 02:03:11 UTC 2025","Thu Oct 09 02:05:38 UTC 2025","146950","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager can change User role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` can change user role from User to `Manager`.
- User after changing role from `User` to `Manager`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Thu Oct 09 02:39:50 UTC 2025","Thu Oct 09 02:40:19 UTC 2025","28976","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload file without project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** upload file if there is **no project created** yet via **CLI**.
"
"skipped","Thu Oct 09 01:35:13 UTC 2025","Thu Oct 09 01:35:13 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output contains required endpoints via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that `output` API response contains required endpoints:

- Http OpenAI Compatible Chat API
- Https OpenAI Compatible Chat API
- Http OpenAI Compatible Embeddings API
- Https OpenAI Compatible Embeddings API
"
"passed","Thu Oct 09 02:51:50 UTC 2025","Thu Oct 09 02:52:35 UTC 2025","45650","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes Manager from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.

### Verify that:

- `Admin` can remove `Manager` from organization via **CLI**.
"
"passed","Thu Oct 09 03:52:58 UTC 2025","Thu Oct 09 03:54:26 UTC 2025","88279","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify Admin can purchase organization credits with custom amount","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- Admin can purchase credits by input custom amount.
"
"passed","Thu Oct 09 02:03:49 UTC 2025","Thu Oct 09 02:04:45 UTC 2025","56104","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Manager` to `Writer` via **CLI**.
"
"passed","Thu Oct 09 03:46:01 UTC 2025","Thu Oct 09 03:46:47 UTC 2025","46223","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Admin can access organization settings","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that `Admin`:

- Can access organization Settings.
"
"passed","Thu Oct 09 03:16:05 UTC 2025","Thu Oct 09 03:17:55 UTC 2025","109977","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite user with organization to organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup second user.
- Pass onboarding for second user and create organization via UI.

### Verify that:

- User can invite to organization another user that already has organization.'
"
"failed","Thu Oct 09 01:47:21 UTC 2025","Thu Oct 09 01:48:23 UTC 2025","62496","E2E Tests","Shell App","TestE2EShellApp","","","Export Shell app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Select `cpu-medium` Resource Preset.
- Set app Display name.
- Click `Export config` button.

### Verify that:

- Config downloaded as `yaml` file matches expected schema.
- Exported config contains valid data.
"
"passed","Thu Oct 09 01:42:12 UTC 2025","Thu Oct 09 01:43:07 UTC 2025","54262","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Import PostgreSQL app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Import PostgreSQL app config via UI.

### Verify that:

- Install required data is the same as in imported config.
"
"skipped","Thu Oct 09 01:46:50 UTC 2025","Thu Oct 09 01:46:50 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can reach Shell app Details page from Installed Apps page","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `Shell app Details` page displayed.
"
"passed","Thu Oct 09 02:59:03 UTC 2025","Thu Oct 09 03:00:02 UTC 2025","59562","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes Admin from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove `Admin` from organization via **CLI**.
"
"passed","Thu Oct 09 01:59:08 UTC 2025","Thu Oct 09 02:00:16 UTC 2025","68730","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Admin role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with Admin role via **API**.

### Verify that:

- `Admin` can change user role from `Admin` to `Manager`.
- User after changing role from `Admin` to `Manager`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Thu Oct 09 02:19:42 UTC 2025","Thu Oct 09 02:21:58 UTC 2025","135959","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Writer to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can promote `Writer` to `Manager`.
"
"passed","Thu Oct 09 03:47:54 UTC 2025","Thu Oct 09 03:48:03 UTC 2025","8607","CLI Tests","CLI Login","TestCLILogin","","","User without organization logs in with auth token via CLI","
- Login with valid credentials **via UI**.
- Get Bearer auth token from Playwright local storage.

### Verify that:

- User can login with Bearer auth token **via CLI**.
- Login output in CLI doesn't contain `organization` and `project`.
"
"passed","Thu Oct 09 03:00:15 UTC 2025","Thu Oct 09 03:01:43 UTC 2025","88189","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove Manager from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Admin` can remove `Manager` from organization.
"
"passed","Thu Oct 09 03:15:50 UTC 2025","Thu Oct 09 03:17:55 UTC 2025","125293","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Writer cannot remove members from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Writer` **cannot** remove members from project.
"
"passed","Thu Oct 09 02:36:16 UTC 2025","Thu Oct 09 02:36:49 UTC 2025","32437","CLI Tests","CLI Storage","TestCLIStorage","","","Admin create folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can create folder via **CLI**.
"
"passed","Thu Oct 09 02:55:16 UTC 2025","Thu Oct 09 02:55:52 UTC 2025","36465","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Set default user credits via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Set default user credits via **CLI**.
- Invite `second user` to organization via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.
- Run `apolo config show` command via **CLI**.

### Verify that:

- Valid user credits amount is displayed in command output.
"
"passed","Thu Oct 09 02:56:57 UTC 2025","Thu Oct 09 02:57:50 UTC 2025","53293","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `User` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `User` from organization via **CLI**.
"
"passed","Thu Oct 09 03:49:53 UTC 2025","Thu Oct 09 03:50:36 UTC 2025","42640","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create second secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create first secret via **CLI**.

### Verify that:

- User can create second secret via **CLI**.
"
"passed","Thu Oct 09 03:20:44 UTC 2025","Thu Oct 09 03:22:13 UTC 2025","89147","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Writer can modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Writer` has access to modify Files.
"
"skipped","Thu Oct 09 01:40:41 UTC 2025","Thu Oct 09 01:40:41 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify installed PostgreSQL app info displayed on the app container via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the PostgreSQL app container.
- `Show All` button displayed on the PostgreSQL app container.
"
"passed","Thu Oct 09 03:00:11 UTC 2025","Thu Oct 09 03:00:52 UTC 2025","40845","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes himself from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove `himself` from organization via **CLI**.
"
"passed","Thu Oct 09 02:25:17 UTC 2025","Thu Oct 09 02:25:51 UTC 2025","34169","UI Tests","UI Files","TestUIFiles","","","User make double click on Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.

### Verify that:

- User opens a folder with a double click on it.
"
"passed","Thu Oct 09 02:49:51 UTC 2025","Thu Oct 09 02:50:55 UTC 2025","63357","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin cannot remove himself from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- `Admin` **cannot** remove himself from project.
"
"passed","Thu Oct 09 03:12:15 UTC 2025","Thu Oct 09 03:13:15 UTC 2025","60385","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite registered user without organization to organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.

### Verify that:

- User can invite to organization another user that is registered but **doesn't have an organization**.
"
"passed","Thu Oct 09 03:43:59 UTC 2025","Thu Oct 09 03:44:45 UTC 2025","46825","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Manager can access organization settings","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that `Manager`:

- Can access organization Settings.
"
"passed","Thu Oct 09 01:57:06 UTC 2025","Thu Oct 09 01:58:07 UTC 2025","61012","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Reader` to `Admin` via **CLI**.
"
"passed","Thu Oct 09 03:18:38 UTC 2025","Thu Oct 09 03:20:39 UTC 2025","120983","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Reader cannot remove members from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Reader` **cannot** remove members from project.
"
"passed","Thu Oct 09 02:21:59 UTC 2025","Thu Oct 09 02:23:20 UTC 2025","80974","UI Tests","UI Files","TestUIFiles","","","Verify Admin can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can create new folder
"
"passed","Thu Oct 09 02:53:39 UTC 2025","Thu Oct 09 02:54:20 UTC 2025","41537","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Invite user to organization with default project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create first project with 'default' option via **CLI**.

### Verify that:

- User can invite registered user to organization via **CLI**.
- Newly invited user is member of default project.
"
"skipped","Thu Oct 09 01:35:25 UTC 2025","Thu Oct 09 01:35:25 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy POST external Chat API /v1/chat/completions returns valid data","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- POST `external` OpenAI Compatible Chat API `{hostname}/v1/chat/completions`.

### Verify that:

- API response matching expected json schema.
"
"passed","Thu Oct 09 02:37:06 UTC 2025","Thu Oct 09 02:38:10 UTC 2025","63939","UI Tests","UI Files","TestUIFiles","","","User make single click on File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `txt` file.
- Single click on file.

### Verify that:
- File info section appears.
- File action bar appears.
"
"skipped","Thu Oct 09 01:46:47 UTC 2025","Thu Oct 09 01:46:47 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify installed Shell app listed in Installed apps via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- Shell app displayed in Installed Apps.
"
"passed","Thu Oct 09 03:41:57 UTC 2025","Thu Oct 09 03:42:23 UTC 2025","25928","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create disk with no project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create disk via CLI if there is no project created yet.
"
"passed","Thu Oct 09 01:51:39 UTC 2025","Thu Oct 09 01:53:09 UTC 2025","90007","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change User role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can change user role from `User` to `Manager`
- User after changing role from `User` to `Manager`:

- Can access organization `Settings`
- Can access organization `Billing`
"
"passed","Thu Oct 09 02:48:27 UTC 2025","Thu Oct 09 02:48:55 UTC 2025","28022","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User creates a first organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create first organization via **CLI**.
"
"passed","Thu Oct 09 02:38:42 UTC 2025","Thu Oct 09 02:39:42 UTC 2025","60577","CLI Tests","CLI Storage","TestCLIStorage","","","Admin remove folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create new folder via **CLI**.

### Verify that:

- User can remove folder via **CLI**.
"
"skipped","Thu Oct 09 01:40:34 UTC 2025","Thu Oct 09 01:40:34 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify event list of installed PostgreSQL app via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- GET '/events' endpoint.

### Verify that:

- App events list contains states queued, progressing and healthy.
"
"passed","Thu Oct 09 03:48:28 UTC 2025","Thu Oct 09 03:49:29 UTC 2025","60648","UI Tests","UI Secrets","TestUISecrets","","","Create First Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create first Secret after project created.
"
"passed","Thu Oct 09 02:17:58 UTC 2025","Thu Oct 09 02:19:16 UTC 2025","78593","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can remove `Reader` from project via **CLI**.
"
"passed","Thu Oct 09 02:10:33 UTC 2025","Thu Oct 09 02:11:35 UTC 2025","61821","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Reader change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Reader` **cannot** change member project roles via **CLI**.
"
"skipped","Thu Oct 09 01:40:51 UTC 2025","Thu Oct 09 01:40:51 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output contains required users data via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Postgres User data
- Postgres Admin data
"
"failed","Thu Oct 09 02:17:27 UTC 2025","Thu Oct 09 02:19:35 UTC 2025","128362","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can demote Writer to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can demote `Writer` to `Reader`.
"
"passed","Thu Oct 09 03:24:55 UTC 2025","Thu Oct 09 03:26:50 UTC 2025","114271","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Reader to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` can invite `third user` as `Reader` to a project.
"
"passed","Thu Oct 09 01:52:12 UTC 2025","Thu Oct 09 01:52:51 UTC 2025","39171","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin demote himself to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- `Admin` **cannot** demote himself via **CLI**.
"
"passed","Thu Oct 09 03:46:13 UTC 2025","Thu Oct 09 03:46:55 UTC 2025","41151","CLI Tests","CLI Disks","TestCLIDisks","","","Admin remove disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can delete disk via **CLI**.
"
"passed","Thu Oct 09 02:50:04 UTC 2025","Thu Oct 09 02:50:58 UTC 2025","54503","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User removes organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create second organization via **CLI**.

### Verify that:

- User can remove organization via **CLI**.
"
"passed","Thu Oct 09 01:39:35 UTC 2025","Thu Oct 09 01:40:50 UTC 2025","74745","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Reader` via **CLI**.
"
"skipped","Thu Oct 09 01:47:04 UTC 2025","Thu Oct 09 01:47:04 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output API schemas is valid via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- API sections data matching expected data format.
"
"passed","Thu Oct 09 02:20:34 UTC 2025","Thu Oct 09 02:22:03 UTC 2025","88853","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Manager from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can remove `Manager` from project via **CLI**.
"
"skipped","Thu Oct 09 01:46:52 UTC 2025","Thu Oct 09 01:46:52 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify installed Shell app info displayed on the app container via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the Shell app container.
- `Show All` button displayed on the Shell app container.
"
"passed","Thu Oct 09 02:26:44 UTC 2025","Thu Oct 09 02:27:40 UTC 2025","55330","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Writer from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Writer` from project via **CLI**.
"
"passed","Thu Oct 09 02:16:33 UTC 2025","Thu Oct 09 02:17:51 UTC 2025","78251","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot demote himself to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` **cannot** demote himself to `User`.
"
"passed","Thu Oct 09 02:23:59 UTC 2025","Thu Oct 09 02:24:40 UTC 2025","41359","UI Tests","UI Files","TestUIFiles","","","User make single click on Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.
- Single click on folder.

### Verify that:

- Folder info section appears.
- Folder action bar appears.
"
"skipped","Thu Oct 09 01:47:07 UTC 2025","Thu Oct 09 01:47:07 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output contains required endpoints via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that `output` API response contains required endpoints:

- Http internal API
- Https external API
"
"failed","Thu Oct 09 03:28:24 UTC 2025","Thu Oct 09 03:29:15 UTC 2025","51847","UI Tests","UI Disks","TestUIDisks","","","Create Second Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.

### Verify that:

- User can create second Disk.
"
"passed","Thu Oct 09 03:04:16 UTC 2025","Thu Oct 09 03:06:47 UTC 2025","150525","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove another Manager from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Manager` role.

### Verify that:

- `Manager` can remove another `Manager` from project.
"
"passed","Thu Oct 09 02:34:11 UTC 2025","Thu Oct 09 02:35:06 UTC 2025","54662","UI Tests","UI Files","TestUIFiles","","","User upload txt file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can upload `txt` file via UI.
"
"failed","Thu Oct 09 01:48:26 UTC 2025","Thu Oct 09 01:49:27 UTC 2025","61204","E2E Tests","Shell App","TestE2EShellApp","","","Import Shell app config via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Import Shell app config via UI.

### Verify that:

- Install required data is the same as in imported config.
"
"passed","Thu Oct 09 01:46:00 UTC 2025","Thu Oct 09 01:47:22 UTC 2025","82006","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Writer` via **CLI**.
"
"skipped","Thu Oct 09 01:46:54 UTC 2025","Thu Oct 09 01:46:54 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on Shell App container.

### Verify that:

- Shell app displayed in Installed Apps.
"
"passed","Thu Oct 09 03:42:30 UTC 2025","Thu Oct 09 03:43:03 UTC 2025","32899","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create first disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create disk via **CLI**.
"
"passed","Thu Oct 09 02:23:39 UTC 2025","Thu Oct 09 02:24:21 UTC 2025","42462","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes himself from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- `Admin` **cannot** remove himself from project via **CLI**.
"
"passed","Thu Oct 09 02:07:32 UTC 2025","Thu Oct 09 02:08:52 UTC 2025","80084","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Admin to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Admin` to `Reader` via **CLI**.
"
"passed","Thu Oct 09 01:38:08 UTC 2025","Thu Oct 09 01:38:57 UTC 2025","48730","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Admin` via **CLI**.
"
"passed","Thu Oct 09 03:08:10 UTC 2025","Thu Oct 09 03:10:38 UTC 2025","147803","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Search Member of organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- User can search organization members using `Search` field.
"
"passed","Thu Oct 09 03:09:47 UTC 2025","Thu Oct 09 03:12:20 UTC 2025","152482","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager cannot remove Admin from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Admin` role.

### Verify that:

- `Manager` **cannot** remove `Admin` from project.
"
"passed","Thu Oct 09 03:44:23 UTC 2025","Thu Oct 09 03:45:10 UTC 2025","47211","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite not registered user to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User **cannot** invite to project another user which is **not registered**.
"
"skipped","Thu Oct 09 01:35:01 UTC 2025","Thu Oct 09 01:35:01 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on Shell App container.

### Verify that:

- DeepSeek app displayed in Installed Apps.
"
"passed","Thu Oct 09 01:41:38 UTC 2025","Thu Oct 09 01:43:14 UTC 2025","95620","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Writer to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can demote `Writer` to `Reader`.
"
"passed","Thu Oct 09 02:50:59 UTC 2025","Thu Oct 09 02:51:43 UTC 2025","43355","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `User` role via **CLI**.

### Verify that:

- `Admin` can remove `User` from organization via **CLI**.
"
"passed","Thu Oct 09 02:24:59 UTC 2025","Thu Oct 09 02:26:05 UTC 2025","66073","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Reader` from project via **CLI**.
"
"passed","Thu Oct 09 02:56:03 UTC 2025","Thu Oct 09 02:56:50 UTC 2025","46593","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes himself from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Admin` **cannot** remove `himself` from organization via **CLI**.
"
"passed","Thu Oct 09 01:57:32 UTC 2025","Thu Oct 09 01:59:01 UTC 2025","89224","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Admin role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` can change user role from `Admin` to `User`
- User after changing role from `Admin` to `User`:

- **Cannot** access organization `Settings`.
- **Cannot** access organization `Billing`.
"
"skipped","Thu Oct 09 01:41:03 UTC 2025","Thu Oct 09 01:41:03 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify PostgreSQL client connection in Shell app via UI","
### Pre-conditions:
- PostgreSQL app installed.
- Shell app installed.

### Steps:
- Login with valid credentials.
- Get Postgres Users.Postgres User Credentials[0].Uri from `output` API.
- Open Shell app.
- Run `psql {URI}` command in Shell app.

### Verify that:

- psql connection is successful.
"
"failed","Thu Oct 09 01:44:49 UTC 2025","Thu Oct 09 01:46:45 UTC 2025","115797","E2E Tests","Shell App","TestE2EShellApp","","","Install Shell app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can install `Shell` app via **UI**.
"
"passed","Thu Oct 09 02:07:54 UTC 2025","Thu Oct 09 02:10:12 UTC 2025","137944","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Reader to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can promote `Reader` to `Manager`.
"
"passed","Thu Oct 09 03:03:19 UTC 2025","Thu Oct 09 03:04:36 UTC 2025","77022","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin cannot remove himself from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` **cannot** remove himself from organization.
"
"passed","Thu Oct 09 02:08:08 UTC 2025","Thu Oct 09 02:10:24 UTC 2025","135735","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager can change Manager role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` can change user role from `Manager` to `User`.
- User after changing role from `Manager` to `User`:

- **Cannot** access organization `Settings`.
- **Cannot** access organization `Billing`.
"
"passed","Thu Oct 09 02:42:13 UTC 2025","Thu Oct 09 02:43:20 UTC 2025","67356","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload bin file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can upload `bin` file via **CLI**.
"
"passed","Thu Oct 09 01:50:52 UTC 2025","Thu Oct 09 01:51:35 UTC 2025","42893","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Manager` via **CLI**.
"
"skipped","Thu Oct 09 01:46:59 UTC 2025","Thu Oct 09 01:46:59 UTC 2025","0","E2E Tests","Shell App","TestE2EShellApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"skipped","Thu Oct 09 01:40:55 UTC 2025","Thu Oct 09 01:40:55 UTC 2025","0","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output contains required endpoints via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that `output` API response contains required endpoints:

- Postgres User data
- Postgres Admin data
"
"passed","Thu Oct 09 02:47:14 UTC 2025","Thu Oct 09 02:47:50 UTC 2025","36145","CLI Tests","CLI Storage","TestCLIStorage","","","Admin remove text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can remove `txt` file via **CLI**.
"
"passed","Thu Oct 09 01:45:35 UTC 2025","Thu Oct 09 01:47:07 UTC 2025","92600","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Writer to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can promote `Writer` to `Manager`.
"
"passed","Thu Oct 09 02:44:25 UTC 2025","Thu Oct 09 02:45:53 UTC 2025","87962","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Writer from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can remove `Writer` from project.
"
"passed","Thu Oct 09 03:44:54 UTC 2025","Thu Oct 09 03:45:53 UTC 2025","58626","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Manager can access organization billing","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that `Manager`:

- Can access organization Billing.
"
"passed","Thu Oct 09 02:34:24 UTC 2025","Thu Oct 09 02:35:29 UTC 2025","64584","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Reader removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Reader` **cannot** remove members from project via **CLI**.
"
"passed","Thu Oct 09 03:08:38 UTC 2025","Thu Oct 09 03:10:34 UTC 2025","115902","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager cannot remove Admin from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** remove another `Admin` from organization.
"
"passed","Thu Oct 09 03:06:54 UTC 2025","Thu Oct 09 03:08:32 UTC 2025","97234","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager can remove another Manager from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` can remove another `Manager` from organization.
"
"passed","Thu Oct 09 02:10:51 UTC 2025","Thu Oct 09 02:13:22 UTC 2025","151094","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot promote Reader to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` **cannot** promote `Reader` to `Admins`.
"
"skipped","Thu Oct 09 01:35:03 UTC 2025","Thu Oct 09 01:35:03 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify Installed apps details info via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- DeepSeek app Details info is valid.
"
"passed","Thu Oct 09 01:51:17 UTC 2025","Thu Oct 09 01:52:56 UTC 2025","99533","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Manager to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can demote `Manager` to `Reader`.
"
"passed","Thu Oct 09 02:05:24 UTC 2025","Thu Oct 09 02:06:54 UTC 2025","90484","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Manager` to `Admin` via **CLI**.
"
"passed","Thu Oct 09 02:31:10 UTC 2025","Thu Oct 09 02:32:07 UTC 2025","57052","UI Tests","UI Files","TestUIFiles","","","User delete Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.

### Verify that:

- User can delete a folder with `Delete` button from File action bar.
"
