"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Mon Sep 29 14:30:07 UTC 2025","Mon Sep 29 14:31:08 UTC 2025","60659","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Admin from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can remove another `Admin` from project via **CLI**.
"
"passed","Mon Sep 29 14:51:39 UTC 2025","Mon Sep 29 14:53:52 UTC 2025","133837","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Writer cannot remove members from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Writer` **cannot** remove members from project.
"
"passed","Mon Sep 29 14:44:48 UTC 2025","Mon Sep 29 14:45:23 UTC 2025","35249","CLI Tests","CLI Storage","TestCLIStorage","","","Admin download text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can download `txt` file via **CLI**.
- downloaded `txt` file md5 hash matches expected file.
"
"passed","Mon Sep 29 14:02:59 UTC 2025","Mon Sep 29 14:04:17 UTC 2025","78360","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Manager role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:
- `Admin` can change user role from `Manager` to `Admin`
- User after changing role from `Manager` to `Admin`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Mon Sep 29 14:06:36 UTC 2025","Mon Sep 29 14:07:43 UTC 2025","66705","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Reader change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Reader` **cannot** change member project roles via **CLI**.
"
"passed","Mon Sep 29 14:54:33 UTC 2025","Mon Sep 29 14:55:38 UTC 2025","64621","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","User removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `User` role via **CLI**.
- Add `third user` to organization with `User` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `User` **cannot** remove members from organization via **CLI**.
"
"passed","Mon Sep 29 14:55:46 UTC 2025","Mon Sep 29 14:56:22 UTC 2025","35682","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Create First Organization via UI","
- Login with valid credentials.

### Verify that:

- User can create first organization during onboarding.
"
"passed","Mon Sep 29 15:29:16 UTC 2025","Mon Sep 29 15:29:42 UTC 2025","26251","UI Tests","UI Signup","TestUISignup","","","New user successful signup","
### Verify that:

- New user can signup via UI.
"
"passed","Mon Sep 29 14:10:09 UTC 2025","Mon Sep 29 14:12:34 UTC 2025","145236","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot promote Reader to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` **cannot** promote `Reader` to `Admins`.
"
"passed","Mon Sep 29 14:53:20 UTC 2025","Mon Sep 29 14:54:06 UTC 2025","46238","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Invite user to organization with default project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create first project with 'default' option via **CLI**.

### Verify that:

- User can invite registered user to organization via **CLI**.
- Newly invited user is member of default project.
"
"passed","Mon Sep 29 14:06:05 UTC 2025","Mon Sep 29 14:07:12 UTC 2025","67556","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Admin role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with Admin role via **API**.

### Verify that:

- `Admin` can change user role from `Admin` to `Manager`.
- User after changing role from `Admin` to `Manager`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"passed","Mon Sep 29 14:42:16 UTC 2025","Mon Sep 29 14:44:45 UTC 2025","148940","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove another Manager from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Manager` role.

### Verify that:

- `Manager` can remove another `Manager` from project.
"
"passed","Mon Sep 29 14:39:50 UTC 2025","Mon Sep 29 14:40:31 UTC 2025","40787","CLI Tests","CLI Storage","TestCLIStorage","","","Admin create folder without project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create folder if there is **no project created** yet via **CLI**.
"
"passed","Mon Sep 29 14:23:54 UTC 2025","Mon Sep 29 14:23:59 UTC 2025","5149","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output contains required endpoints via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that `output` API response contains required endpoints:

- Http internal API
- Https external API
"
"passed","Mon Sep 29 14:30:53 UTC 2025","Mon Sep 29 14:32:06 UTC 2025","72897","UI Tests","UI Files","TestUIFiles","","","User rename Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.

### Verify that:

- User can rename a folder with `Rename` button from File action bar.
"
"passed","Mon Sep 29 14:38:41 UTC 2025","Mon Sep 29 14:39:41 UTC 2025","60348","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Reader removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Reader` **cannot** remove members from project via **CLI**.
"
"passed","Mon Sep 29 14:07:55 UTC 2025","Mon Sep 29 14:10:06 UTC 2025","130774","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Install PostgreSQL app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.
- Select the Preset `cpu-medium`
- Set PGbouncer.replicas to `1`
- Set Postgres Configuration.Instance replicas to `1`
- Click on Database Users `Add Entry`
- Enter Database `user name`
- Enter Database `name`
- Select PG Bouncer.Resource Preset `cpu-medium`

### Verify that:

- User can install `PostgreSQL` app via **UI**.
"
"passed","Mon Sep 29 15:22:21 UTC 2025","Mon Sep 29 15:24:18 UTC 2025","117252","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite member that NOT in organization to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- DO NOT invite `second user` to organization.

### Verify that:

- User **cannot** invite to project another user which is **not member of organization**.
"
"passed","Mon Sep 29 15:01:59 UTC 2025","Mon Sep 29 15:03:53 UTC 2025","114224","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager can remove User from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` can remove `User` from organization.
"
"passed","Mon Sep 29 14:34:18 UTC 2025","Mon Sep 29 14:35:10 UTC 2025","51383","UI Tests","UI Files","TestUIFiles","","","User upload txt file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can upload `txt` file via UI.
"
"skipped","Mon Sep 29 13:55:32 UTC 2025","Mon Sep 29 13:55:32 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy POST external Chat API /v1/chat/completions returns valid data","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- POST `external` OpenAI Compatible Chat API `{hostname}/v1/chat/completions`.

### Verify that:

- API response matching expected json schema.
"
"passed","Mon Sep 29 14:01:23 UTC 2025","Mon Sep 29 14:02:52 UTC 2025","88648","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Manager role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:
- `Admin` can change user role from `Manager` to `User`
- User after changing role from `Manager` to `User`:

- **Cannot** access organization `Settings`
- **Cannot** access organization `Billing`
"
"passed","Mon Sep 29 14:04:56 UTC 2025","Mon Sep 29 14:07:46 UTC 2025","170597","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Reader to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can promote `Reader` to `Writer`.
"
"passed","Mon Sep 29 15:07:26 UTC 2025","Mon Sep 29 15:09:49 UTC 2025","142507","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Manager to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- Manager can invite `third user` as `Manager` to a project.
"
"passed","Mon Sep 29 14:50:01 UTC 2025","Mon Sep 29 14:50:30 UTC 2025","28605","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User verifies config show output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Run `apolo config show` command via **CLI**.

### Verify that:

- `apolo config show` command output is valid.
"
"passed","Mon Sep 29 15:04:07 UTC 2025","Mon Sep 29 15:06:01 UTC 2025","114531","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager can remove another Manager from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` can remove another `Manager` from organization.
"
"passed","Mon Sep 29 15:10:42 UTC 2025","Mon Sep 29 15:11:17 UTC 2025","35879","UI Tests","UI Disks","TestUIDisks","","","Create First Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create first Disk after project created.
"
"passed","Mon Sep 29 14:07:56 UTC 2025","Mon Sep 29 14:10:00 UTC 2025","124619","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Reader to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can promote `Reader` to `Manager`.
"
"passed","Mon Sep 29 14:33:19 UTC 2025","Mon Sep 29 14:34:10 UTC 2025","51678","UI Tests","UI Files","TestUIFiles","","","User upload bin file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can upload `bin` file via UI.
"
"passed","Mon Sep 29 14:25:49 UTC 2025","Mon Sep 29 14:27:11 UTC 2025","81668","UI Tests","UI Files","TestUIFiles","","","Verify Manager can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` can create new folder.
"
"passed","Mon Sep 29 15:09:57 UTC 2025","Mon Sep 29 15:12:10 UTC 2025","133144","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager cannot invite Admin to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` **cannot** invite `third user` as `Admin` to a project.
"
"failed","Mon Sep 29 15:15:27 UTC 2025","Mon Sep 29 15:15:43 UTC 2025","16456","UI Tests","UI Disks","TestUIDisks","","","Open Disk info view by click on disk button","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.

### Verify that:

- After click on disk button Disk info view appears.
"
"passed","Mon Sep 29 15:29:43 UTC 2025","Mon Sep 29 15:31:02 UTC 2025","78179","E2E Tests","Apolo CLI Hello World Job Verification","TestHelloWorldJob","","","Run Hello World Job and Validate UI and CLI Results","
- Login with valid credentials.
- Create new organization via **UI** during onboarding.
- Create new project via **CLI**.
- Run `Hello World` Job via **CLI**.

Verify that:

- Job executed successfully in **CLI**.
- Job is displayed in successful jobs via **UI**.
"
"passed","Mon Sep 29 13:50:48 UTC 2025","Mon Sep 29 13:51:31 UTC 2025","42978","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Reader` via **CLI**.
"
"passed","Mon Sep 29 15:18:34 UTC 2025","Mon Sep 29 15:19:59 UTC 2025","84653","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite member of organization to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization.

### Verify that:

- User can invite member of organization to project.
"
"passed","Mon Sep 29 14:03:08 UTC 2025","Mon Sep 29 14:04:12 UTC 2025","63951","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Manager` to `Admin` via **CLI**.
"
"passed","Mon Sep 29 15:27:06 UTC 2025","Mon Sep 29 15:28:14 UTC 2025","67638","UI Tests","UI Secrets","TestUISecrets","","","Search Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create Secret.

### Verify that:

- User can Search for secret via UI.
"
"passed","Mon Sep 29 14:23:44 UTC 2025","Mon Sep 29 14:23:51 UTC 2025","7519","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output API schemas is valid via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- API sections data matching expected data format.
"
"passed","Mon Sep 29 13:55:19 UTC 2025","Mon Sep 29 13:56:13 UTC 2025","54372","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Reader` to `Manager` via **CLI**.
"
"passed","Mon Sep 29 13:58:27 UTC 2025","Mon Sep 29 13:59:21 UTC 2025","54387","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Writer` to `Manager` via **CLI**.
"
"passed","Mon Sep 29 14:47:47 UTC 2025","Mon Sep 29 14:48:37 UTC 2025","50259","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes himself from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Admin` **cannot** remove `himself` from organization via **CLI**.
"
"passed","Mon Sep 29 14:26:59 UTC 2025","Mon Sep 29 14:28:38 UTC 2025","98595","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Reader from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can remove `Reader` from `project`.
"
"passed","Mon Sep 29 15:12:19 UTC 2025","Mon Sep 29 15:13:03 UTC 2025","43989","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create First Project from main page via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create first project in organization from **the main page**.
"
"passed","Mon Sep 29 13:56:22 UTC 2025","Mon Sep 29 13:57:15 UTC 2025","53011","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Reader` to `Admin` via **CLI**.
"
"passed","Mon Sep 29 14:24:59 UTC 2025","Mon Sep 29 14:27:09 UTC 2025","129904","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Reader cannot change member roles","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Reader` **cannot** change member roles.
"
"passed","Mon Sep 29 13:59:30 UTC 2025","Mon Sep 29 14:00:37 UTC 2025","66824","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Writer` to `Admin` via **CLI**.
"
"passed","Mon Sep 29 13:43:53 UTC 2025","Mon Sep 29 13:45:33 UTC 2025","100435","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote Reader to `Writer`.
"
"passed","Mon Sep 29 14:23:32 UTC 2025","Mon Sep 29 14:23:40 UTC 2025","7978","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output contains required endpoints via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Http internal API
- Https external API
"
"failed","Mon Sep 29 15:17:43 UTC 2025","Mon Sep 29 15:17:54 UTC 2025","11137","UI Tests","UI Disks","TestUIDisks","","","Delete Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.

### Verify that:

- User can delete Disk.
"
"passed","Mon Sep 29 14:21:12 UTC 2025","Mon Sep 29 14:21:19 UTC 2025","7010","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can reach Shell app Details page from Installed Apps page","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `Shell app Details` page displayed.
"
"passed","Mon Sep 29 14:47:33 UTC 2025","Mon Sep 29 14:50:06 UTC 2025","152830","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager cannot remove Admin from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Admin` role.

### Verify that:

- `Manager` **cannot** remove `Admin` from project.
"
"passed","Mon Sep 29 13:49:10 UTC 2025","Mon Sep 29 13:50:45 UTC 2025","95017","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Writer to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can demote `Writer` to `Reader`.
"
"passed","Mon Sep 29 15:28:26 UTC 2025","Mon Sep 29 15:29:29 UTC 2025","63046","UI Tests","UI Secrets","TestUISecrets","","","Delete Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create Secret.

### Verify that:

- User can delete Secret.
"
"passed","Mon Sep 29 14:36:44 UTC 2025","Mon Sep 29 14:39:16 UTC 2025","152177","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove Reader from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Manager` can remove `Reader` from project.
"
"passed","Mon Sep 29 14:24:24 UTC 2025","Mon Sep 29 14:24:43 UTC 2025","19350","E2E Tests","Shell App","TestE2EShellApp","","","Enter command in Shell app via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.
- Get `external https` endpoint.
- Launch Shell app.
- Execute `apolo config show` command.

### Verify that Shell app output contains:

- executed command `apolo config show`.
- `User configuration` section.
- `Resource Preset` section.
"
"passed","Mon Sep 29 14:05:30 UTC 2025","Mon Sep 29 14:06:28 UTC 2025","57783","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Writer change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Writer` **cannot** change member project roles via **CLI**.
"
"passed","Mon Sep 29 14:21:03 UTC 2025","Mon Sep 29 14:22:58 UTC 2025","114885","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Admin role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `Admin` to `Manager`.
"
"passed","Mon Sep 29 14:43:19 UTC 2025","Mon Sep 29 14:43:57 UTC 2025","37974","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can upload `txt` file via **CLI**.
"
"passed","Mon Sep 29 15:24:31 UTC 2025","Mon Sep 29 15:25:29 UTC 2025","57898","UI Tests","UI Secrets","TestUISecrets","","","Create First Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create first Secret after project created.
"
"passed","Mon Sep 29 14:18:30 UTC 2025","Mon Sep 29 14:21:00 UTC 2025","150146","E2E Tests","Shell App","TestE2EShellApp","","","Install Shell app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can install `Shell` app via **UI**.
"
"passed","Mon Sep 29 15:31:08 UTC 2025","Mon Sep 29 15:32:29 UTC 2025","80861","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify Admin can purchase organization credits with custom amount","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- Admin can purchase credits by input custom amount.
"
"passed","Mon Sep 29 14:12:42 UTC 2025","Mon Sep 29 14:14:56 UTC 2025","134351","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can demote Writer to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can demote `Writer` to `Reader`.
"
"passed","Mon Sep 29 15:12:02 UTC 2025","Mon Sep 29 15:12:56 UTC 2025","54656","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Switch between projects via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create first project via **CLI**.
- Create second project via **CLI**.

### Verify that:

- User can switch between projects via **CLI**.
"
"passed","Mon Sep 29 15:19:08 UTC 2025","Mon Sep 29 15:19:49 UTC 2025","40188","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create second disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can create second disk via **CLI**.
"
"passed","Mon Sep 29 14:21:22 UTC 2025","Mon Sep 29 14:22:14 UTC 2025","52385","E2E Tests","Shell App","TestE2EShellApp","","","Verify installed Shell app info displayed on the app container via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the Shell app container.
- `Show All` button displayed on the Shell app container.
"
"passed","Mon Sep 29 14:10:18 UTC 2025","Mon Sep 29 14:10:26 UTC 2025","7924","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify User can reach PostgreSQL app Details page from Installed Apps page","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `PostgreSQL app Details` page displayed.
"
"skipped","Mon Sep 29 13:55:18 UTC 2025","Mon Sep 29 13:55:18 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output contains required endpoints via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that `output` API response contains required endpoints:

- Http OpenAI Compatible Chat API
- Https OpenAI Compatible Chat API
- Http OpenAI Compatible Embeddings API
- Https OpenAI Compatible Embeddings API
"
"passed","Mon Sep 29 14:34:19 UTC 2025","Mon Sep 29 14:35:26 UTC 2025","67670","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Manager from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove another `Manager` from project via **CLI**.
"
"passed","Mon Sep 29 15:09:44 UTC 2025","Mon Sep 29 15:10:20 UTC 2025","35450","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User creates a first project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create first project via **CLI**.
"
"passed","Mon Sep 29 14:12:34 UTC 2025","Mon Sep 29 14:12:43 UTC 2025","9779","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output contains required users data via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Postgres User data
- Postgres Admin data
"
"passed","Mon Sep 29 14:31:17 UTC 2025","Mon Sep 29 14:31:53 UTC 2025","35877","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes himself from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- `Admin` **cannot** remove himself from project via **CLI**.
"
"passed","Mon Sep 29 14:00:45 UTC 2025","Mon Sep 29 14:01:56 UTC 2025","71440","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Manager` to `Reader` via **CLI**.
"
"passed","Mon Sep 29 15:27:29 UTC 2025","Mon Sep 29 15:28:09 UTC 2025","40012","CLI Tests","CLI Login","TestCLILogin","","","User with organization and project logs in with auth token via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create organization via API.
- Create project via API.

### Verify that:

- User can login with Bearer auth token via CLI.
- Login output in CLI contain valid organization and project.
"
"failed","Mon Sep 29 13:43:07 UTC 2025","Mon Sep 29 13:54:56 UTC 2025","709551","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Install DeepSeek app via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project via **API**.

### Verify that:

- User can install `DeepSeek` app via **UI**.
"
"passed","Mon Sep 29 15:02:38 UTC 2025","Mon Sep 29 15:05:15 UTC 2025","157303","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Search Member of organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- User can search organization members using `Search` field.
"
"passed","Mon Sep 29 14:12:25 UTC 2025","Mon Sep 29 14:12:31 UTC 2025","5493","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"passed","Mon Sep 29 14:54:15 UTC 2025","Mon Sep 29 14:54:53 UTC 2025","37645","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User verifies admin get-org-users output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Invite `second user` to organization via **CLI**.
- Run `apolo admin get-org-users` command via **CLI**.

### Verify that:

- Organization members are listed with valid data in command output.
"
"passed","Mon Sep 29 14:28:49 UTC 2025","Mon Sep 29 14:29:43 UTC 2025","53981","UI Tests","UI Files","TestUIFiles","","","User make single click on Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.
- Single click on folder.

### Verify that:

- Folder info section appears.
- Folder action bar appears.
"
"passed","Mon Sep 29 14:16:46 UTC 2025","Mon Sep 29 14:18:58 UTC 2025","131502","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Manager role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` cannot change user role from `Manager` to `Admin`.
"
"passed","Mon Sep 29 14:21:03 UTC 2025","Mon Sep 29 14:21:09 UTC 2025","5949","E2E Tests","Shell App","TestE2EShellApp","","","Verify installed Shell app listed in Installed apps via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- Shell app displayed in Installed Apps.
"
"passed","Mon Sep 29 13:52:30 UTC 2025","Mon Sep 29 13:53:12 UTC 2025","41771","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Manager` via **CLI**.
"
"passed","Mon Sep 29 14:50:16 UTC 2025","Mon Sep 29 14:51:31 UTC 2025","75501","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager cannot remove himself from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` **cannot** remove himself from project.
"
"passed","Mon Sep 29 13:45:42 UTC 2025","Mon Sep 29 13:47:21 UTC 2025","99188","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote `Reader` to `Manager`.
"
"passed","Mon Sep 29 13:48:17 UTC 2025","Mon Sep 29 13:48:58 UTC 2025","41113","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Reader` via **CLI**.
"
"passed","Mon Sep 29 15:23:06 UTC 2025","Mon Sep 29 15:23:43 UTC 2025","36745","CLI Tests","CLI Disks","TestCLIDisks","","","Admin remove disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can delete disk via **CLI**.
"
"passed","Mon Sep 29 15:11:11 UTC 2025","Mon Sep 29 15:11:52 UTC 2025","41721","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User creates a second project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create first project via **CLI**.

### Verify that:

- User can create second project via **CLI**.
"
"passed","Mon Sep 29 15:18:01 UTC 2025","Mon Sep 29 15:19:16 UTC 2025","75229","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited User access","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that `User`:

- **Cannot** access organization Settings.
- **Cannot** access organization Billing.
- **Cannot** invite member to organization.
- **Cannot** edit organization members.
- **Cannot** delete members from organization.
"
"passed","Mon Sep 29 14:02:05 UTC 2025","Mon Sep 29 14:02:59 UTC 2025","54777","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Manager to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Manager` to `Writer` via **CLI**.
"
"passed","Mon Sep 29 14:13:00 UTC 2025","Mon Sep 29 14:13:05 UTC 2025","5798","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output contains required endpoints via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that `output` API response contains required endpoints:

- Postgres User data
- Postgres Admin data
"
"passed","Mon Sep 29 15:09:50 UTC 2025","Mon Sep 29 15:10:33 UTC 2025","43333","UI Tests","UI Disks","TestUIDisks","","","Create First Disk without project via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User **cannot** create first Disk if **no project created** yet.
"
"skipped","Mon Sep 29 14:36:49 UTC 2025","Mon Sep 29 14:37:31 UTC 2025","41733","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes himself from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove himself from project via **CLI**.
"
"skipped","Mon Sep 29 13:55:02 UTC 2025","Mon Sep 29 13:55:02 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify installed DeepSeek app info displayed on the app container via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the DeepSeek app container.
- `Show All` button displayed on the DeepSeek app container.
"
"passed","Mon Sep 29 13:45:49 UTC 2025","Mon Sep 29 13:46:31 UTC 2025","41635","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Reader` via **CLI**.
"
"passed","Mon Sep 29 15:00:39 UTC 2025","Mon Sep 29 15:01:51 UTC 2025","72483","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin cannot remove himself from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` **cannot** remove himself from organization.
"
"passed","Mon Sep 29 13:52:40 UTC 2025","Mon Sep 29 13:53:58 UTC 2025","78265","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Writer to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can promote `Writer` to `Manager`.
"
"passed","Mon Sep 29 15:13:06 UTC 2025","Mon Sep 29 15:14:02 UTC 2025","55464","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Add organization member to project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can add organization member to project via **CLI**.
"
"passed","Mon Sep 29 15:26:41 UTC 2025","Mon Sep 29 15:27:17 UTC 2025","36155","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create second secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create first secret via **CLI**.

### Verify that:

- User can create second secret via **CLI**.
"
"passed","Mon Sep 29 13:47:29 UTC 2025","Mon Sep 29 13:48:59 UTC 2025","90547","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Reader to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Admin` can promote `Reader` to `Admin`.
"
"passed","Mon Sep 29 15:05:28 UTC 2025","Mon Sep 29 15:07:17 UTC 2025","109403","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Writer to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` can invite `third user` as `Writer` to a project.
"
"passed","Mon Sep 29 14:56:21 UTC 2025","Mon Sep 29 14:57:35 UTC 2025","73863","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove User from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can remove `User` from organization.
"
"passed","Mon Sep 29 14:52:34 UTC 2025","Mon Sep 29 14:53:25 UTC 2025","51467","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes Admin from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove `Admin` from organization via **CLI**.
"
"passed","Mon Sep 29 14:35:43 UTC 2025","Mon Sep 29 14:36:35 UTC 2025","51846","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin cannot remove himself from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- `Admin` **cannot** remove himself from project.
"
"passed","Mon Sep 29 15:13:10 UTC 2025","Mon Sep 29 15:13:54 UTC 2025","44113","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create First Project from top pane of main via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create first project in organization from project menu in the **top pane of the main page**.
"
"passed","Mon Sep 29 15:07:57 UTC 2025","Mon Sep 29 15:09:41 UTC 2025","104288","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite user with organization to organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup second user.
- Pass onboarding for second user and create organization via UI.

### Verify that:

- User can invite to organization another user that already has organization.'
"
"passed","Mon Sep 29 14:13:08 UTC 2025","Mon Sep 29 14:13:14 UTC 2025","5671","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output endpoints schema via API","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that:

- API endpoints data matching expected json schema.
"
"passed","Mon Sep 29 14:54:02 UTC 2025","Mon Sep 29 14:56:11 UTC 2025","129170","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Reader cannot remove members from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Reader` **cannot** remove members from project.
"
"passed","Mon Sep 29 14:35:40 UTC 2025","Mon Sep 29 14:36:40 UTC 2025","60211","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Admin from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` cannot remove `Admin` from project via **CLI**.
"
"passed","Mon Sep 29 13:49:09 UTC 2025","Mon Sep 29 13:49:50 UTC 2025","40760","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Writer` via **CLI**.
"
"passed","Mon Sep 29 14:59:08 UTC 2025","Mon Sep 29 15:00:32 UTC 2025","83179","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove another Admin from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` can remove another `Admin` from organization.
"
"passed","Mon Sep 29 14:52:40 UTC 2025","Mon Sep 29 14:53:11 UTC 2025","31237","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Invite user to org via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second` user via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.

### Verify that:

- User can invite registered user to organization via **CLI**.
"
"passed","Mon Sep 29 13:53:59 UTC 2025","Mon Sep 29 13:55:09 UTC 2025","69763","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Reader` to `Writer` via **CLI**.
"
"passed","Mon Sep 29 13:57:28 UTC 2025","Mon Sep 29 13:58:54 UTC 2025","86186","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Manager to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can demote `Manager` to `Writer`.
"
"skipped","Mon Sep 29 13:55:10 UTC 2025","Mon Sep 29 13:55:10 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"passed","Mon Sep 29 14:42:43 UTC 2025","Mon Sep 29 14:43:12 UTC 2025","28845","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload file without project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** upload file if there is **no project created** yet via **CLI**.
"
"passed","Mon Sep 29 14:56:40 UTC 2025","Mon Sep 29 14:57:58 UTC 2025","78092","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Reader cannot modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Reader` role.

### Verify that:

- `Reader` **doesn't** have access to modify Files.
"
"skipped","Mon Sep 29 13:55:21 UTC 2025","Mon Sep 29 13:55:21 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output endpoints schema via API","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that:

- API endpoints data matching expected json schema.
"
"passed","Mon Sep 29 15:01:37 UTC 2025","Mon Sep 29 15:02:54 UTC 2025","77025","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Manager` has access to modify Files.
"
"passed","Mon Sep 29 14:42:03 UTC 2025","Mon Sep 29 14:42:50 UTC 2025","47635","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `User` role via **CLI**.

### Verify that:

- `Admin` can remove `User` from organization via **CLI**.
"
"passed","Mon Sep 29 14:58:46 UTC 2025","Mon Sep 29 15:00:12 UTC 2025","86043","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Set default organization credits via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can set default organization credits.
"
"passed","Mon Sep 29 14:23:24 UTC 2025","Mon Sep 29 14:23:29 UTC 2025","5689","E2E Tests","Shell App","TestE2EShellApp","","","Verify Installed apps details info via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `instances` API.

### Verify that:

- API response contains valid data.
"
"passed","Mon Sep 29 14:42:58 UTC 2025","Mon Sep 29 14:43:46 UTC 2025","47755","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes Manager from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.

### Verify that:

- `Admin` can remove `Manager` from organization via **CLI**.
"
"passed","Mon Sep 29 14:44:54 UTC 2025","Mon Sep 29 14:45:40 UTC 2025","45447","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Admin removes Admin from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Admin` role via **CLI**.

### Verify that:

- `Admin` can remove `Admin` from organization via **CLI**.
"
"passed","Mon Sep 29 14:57:43 UTC 2025","Mon Sep 29 14:59:00 UTC 2025","77257","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Admin can remove Manager from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Admin` can remove `Manager` from organization.
"
"passed","Mon Sep 29 14:17:30 UTC 2025","Mon Sep 29 14:20:00 UTC 2025","149752","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot promote Writer to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` **cannot** promote `Writer` to `Admin`.
"
"passed","Mon Sep 29 14:47:36 UTC 2025","Mon Sep 29 14:48:07 UTC 2025","30257","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User creates a first organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create first organization via **CLI**.
"
"skipped","Mon Sep 29 13:54:56 UTC 2025","Mon Sep 29 13:54:56 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify installed DeepSeek app listed in Installed apps via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- DeepSeek app displayed in Installed Apps.
"
"passed","Mon Sep 29 13:43:50 UTC 2025","Mon Sep 29 13:44:41 UTC 2025","50907","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Manager` via **CLI**.
"
"passed","Mon Sep 29 14:22:17 UTC 2025","Mon Sep 29 14:23:11 UTC 2025","54065","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on Shell App container.

### Verify that:

- Shell app displayed in Installed Apps.
"
"passed","Mon Sep 29 15:28:23 UTC 2025","Mon Sep 29 15:29:11 UTC 2025","48396","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify User cannot purchase credits via top pane","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role.

### Verify that:

- `User` **cannot** purchase credits via top pane.
"
"passed","Mon Sep 29 14:15:08 UTC 2025","Mon Sep 29 14:17:22 UTC 2025","133420","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager can promote Writer to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can promote `Writer` to `Manager`.
"
"passed","Mon Sep 29 14:32:13 UTC 2025","Mon Sep 29 14:33:11 UTC 2025","57942","UI Tests","UI Files","TestUIFiles","","","User delete Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.

### Verify that:

- User can delete a folder with `Delete` button from File action bar.
"
"passed","Mon Sep 29 14:11:18 UTC 2025","Mon Sep 29 14:12:12 UTC 2025","53833","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on PostgreSQL App container.

### Verify that:

- PostgreSQL app displayed in Installed Apps.
"
"passed","Mon Sep 29 15:22:20 UTC 2025","Mon Sep 29 15:23:27 UTC 2025","66660","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Manager can access organization billing","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that `Manager`:

- Can access organization Billing.
"
"skipped","Mon Sep 29 13:55:29 UTC 2025","Mon Sep 29 13:55:29 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy GET external Chat API /v1/models returns valid data","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET `external` OpenAI Compatible Chat API `{hostname}/v1/models`.

### Verify that:

- API response contains valid data.
"
"passed","Mon Sep 29 13:58:19 UTC 2025","Mon Sep 29 13:59:42 UTC 2025","82570","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change User role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can change user role from `User` to `Manager`
- User after changing role from `User` to `Manager`:

- Can access organization `Settings`
- Can access organization `Billing`
"
"passed","Mon Sep 29 14:33:09 UTC 2025","Mon Sep 29 14:34:08 UTC 2025","59654","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Writer from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Writer` from project via **CLI**.
"
"passed","Mon Sep 29 14:19:05 UTC 2025","Mon Sep 29 14:20:55 UTC 2025","110417","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change Admin role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `Admin` to `User`.
"
"passed","Mon Sep 29 14:36:26 UTC 2025","Mon Sep 29 14:37:21 UTC 2025","55032","UI Tests","UI Files","TestUIFiles","","","User download bin file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `bin` file.

### Verify that:

- User can download `bin` file via UI.
- Downloaded `bin` file md5 hash matches expected file.
"
"skipped","Mon Sep 29 13:55:35 UTC 2025","Mon Sep 29 13:55:35 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- DeepSeek app uninstalled.
"
"passed","Mon Sep 29 14:27:20 UTC 2025","Mon Sep 29 14:28:42 UTC 2025","82285","UI Tests","UI Files","TestUIFiles","","","Verify Admin can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can create new folder
"
"passed","Mon Sep 29 14:38:27 UTC 2025","Mon Sep 29 14:39:34 UTC 2025","66276","UI Tests","UI Files","TestUIFiles","","","User rename File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload txt file.

### Verify that:

- User can rename a file with `Rename` button from File action bar.
"
"passed","Mon Sep 29 15:03:01 UTC 2025","Mon Sep 29 15:05:15 UTC 2025","133833","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Manager can invite Reader to a project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.

### Verify that:

- `Manager` can invite `third user` as `Reader` to a project.
"
"skipped","Mon Sep 29 13:55:15 UTC 2025","Mon Sep 29 13:55:15 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output API schemas is valid via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- API sections data matching expected data format.
"
"passed","Mon Sep 29 14:23:14 UTC 2025","Mon Sep 29 14:23:21 UTC 2025","7186","E2E Tests","Shell App","TestE2EShellApp","","","Verify Installed apps details info via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- Shell app Details info is valid.
"
"passed","Mon Sep 29 14:09:57 UTC 2025","Mon Sep 29 14:11:56 UTC 2025","119309","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager can change User role to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` can change user role from User to `Manager`.
- User after changing role from `User` to `Manager`:

- Can access organization `Settings`.
- Can access organization `Billing`.
"
"skipped","Mon Sep 29 13:55:07 UTC 2025","Mon Sep 29 13:55:07 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify Installed apps details info via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- DeepSeek app Details info is valid.
"
"passed","Mon Sep 29 15:26:49 UTC 2025","Mon Sep 29 15:27:20 UTC 2025","31096","CLI Tests","CLI Login","TestCLILogin","","","User with organization logs in with auth token via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create organization via **API**.

### Verify that:

- User can login with Bearer auth token via **CLI**.
- Login output in CLI valid `organization` and no `project` info.
"
"passed","Mon Sep 29 14:07:20 UTC 2025","Mon Sep 29 14:08:30 UTC 2025","69524","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin cannot demote himself to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` **cannot** demote himself to `User`.
"
"passed","Mon Sep 29 14:04:25 UTC 2025","Mon Sep 29 14:05:58 UTC 2025","92613","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change Admin role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` can change user role from `Admin` to `User`
- User after changing role from `Admin` to `User`:

- **Cannot** access organization `Settings`.
- **Cannot** access organization `Billing`.
"
"passed","Mon Sep 29 14:03:38 UTC 2025","Mon Sep 29 14:04:48 UTC 2025","70145","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Manager`.
"
"passed","Mon Sep 29 15:24:11 UTC 2025","Mon Sep 29 15:25:05 UTC 2025","54939","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Admin can access organization settings","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that `Admin`:

- Can access organization Settings.
"
"passed","Mon Sep 29 13:47:29 UTC 2025","Mon Sep 29 13:48:09 UTC 2025","40586","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Admin` via **CLI**.
"
"passed","Mon Sep 29 14:23:05 UTC 2025","Mon Sep 29 14:24:20 UTC 2025","74781","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot demote himself to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` **cannot** demote himself to `User`.
"
"passed","Mon Sep 29 14:55:52 UTC 2025","Mon Sep 29 14:56:33 UTC 2025","40941","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","Set default user credits via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Set default user credits via **CLI**.
- Invite `second user` to organization via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.
- Run `apolo config show` command via **CLI**.

### Verify that:

- Valid user credits amount is displayed in command output.
"
"skipped","Mon Sep 29 13:55:24 UTC 2025","Mon Sep 29 13:55:24 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy GET external Chat API returns 404","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET `external` OpenAI Compatible Chat API `hostname` link.

### Verify that:

- API response status is 404.
"
"passed","Mon Sep 29 14:33:57 UTC 2025","Mon Sep 29 14:35:31 UTC 2025","94231","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove another Admin from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can remove another `Admin` from project.
"
"passed","Mon Sep 29 13:59:50 UTC 2025","Mon Sep 29 14:01:15 UTC 2025","84868","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin can change User role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `User` role via **API**.

### Verify that:

- `Admin` can change user role from `User` to `Admin`
- User after changing role from `User` to `Admin`:

- Can access organization `Settings`
- Can access organization `Billing`
"
"passed","Mon Sep 29 14:24:47 UTC 2025","Mon Sep 29 14:25:33 UTC 2025","45481","E2E Tests","Shell App","TestE2EShellApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- Shell app uninstalled.
"
"passed","Mon Sep 29 14:30:30 UTC 2025","Mon Sep 29 14:31:58 UTC 2025","87928","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Writer from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can remove `Writer` from project.
"
"passed","Mon Sep 29 14:51:36 UTC 2025","Mon Sep 29 14:52:25 UTC 2025","48331","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes Manager from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Manager` from organization via **CLI**.
"
"passed","Mon Sep 29 15:19:36 UTC 2025","Mon Sep 29 15:20:33 UTC 2025","57492","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Manager can access organization settings","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that `Manager`:

- Can access organization Settings.
"
"skipped","Mon Sep 29 13:55:04 UTC 2025","Mon Sep 29 13:55:04 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can reach Installed apps page from app container via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click `Show All` button on Shell App container.

### Verify that:

- DeepSeek app displayed in Installed Apps.
"
"skipped","Mon Sep 29 13:55:27 UTC 2025","Mon Sep 29 13:55:27 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verfiy GET external Chat API /docs returns Swagger page","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- GET `external` OpenAI Compatible Chat API `{hostname}/docs link`.

### Verify that:

- Swagger page is returned.
"
"passed","Mon Sep 29 14:48:15 UTC 2025","Mon Sep 29 14:49:04 UTC 2025","49090","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User creates a second organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.

### Verify that:

- User can create second organization via **CLI**.
"
"passed","Mon Sep 29 15:12:18 UTC 2025","Mon Sep 29 15:13:16 UTC 2025","57971","UI Tests","UI Disks","TestUIDisks","","","Search Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.
- Create second Disk.

### Verify that:

- User can search for Disk via UI with the `Search` field.
"
"passed","Mon Sep 29 14:04:25 UTC 2025","Mon Sep 29 14:05:21 UTC 2025","55431","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Admin to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Admin` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** change project role from `Admin` to `Reader` via **CLI**.
"
"passed","Mon Sep 29 15:17:50 UTC 2025","Mon Sep 29 15:18:17 UTC 2025","26775","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create disk with no project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create disk via CLI if there is no project created yet.
"
"passed","Mon Sep 29 13:44:49 UTC 2025","Mon Sep 29 13:45:40 UTC 2025","50859","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Admin` via **CLI**.
"
"passed","Mon Sep 29 15:25:26 UTC 2025","Mon Sep 29 15:25:48 UTC 2025","22064","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create secret with no project created via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User **cannot** create secret if there is no project created via **CLI**.
"
"passed","Mon Sep 29 14:59:58 UTC 2025","Mon Sep 29 15:01:25 UTC 2025","86728","UI Tests","UI Project Roles Access","TestUIProjectRolesAccess","","","Verify Writer can modify files","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Writer` has access to modify Files.
"
"passed","Mon Sep 29 13:46:38 UTC 2025","Mon Sep 29 13:47:21 UTC 2025","42546","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Writer to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Writer` to `Manager` via **CLI**.
"
"passed","Mon Sep 29 15:25:14 UTC 2025","Mon Sep 29 15:26:27 UTC 2025","73030","UI Tests","UI Organization Roles Access","TestUIOrganizationRolesAccess","","","Verify invited Admin can access organization billing","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that `Admin`:

- Can access organization Billing.
"
"passed","Mon Sep 29 15:20:00 UTC 2025","Mon Sep 29 15:20:52 UTC 2025","52159","CLI Tests","CLI Disks","TestCLIDisks","","","Admin get disk by ID via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.
- Create first disk via **CLI**.

### Verify that:

- User can get disk info by disk ID via **CLI**.
"
"passed","Mon Sep 29 13:54:05 UTC 2025","Mon Sep 29 13:55:43 UTC 2025","97481","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Writer to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Admin` can promote `Writer` to `Admin`.
"
"passed","Mon Sep 29 14:15:40 UTC 2025","Mon Sep 29 14:16:06 UTC 2025","25523","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify PostgreSQL client connection in Shell app via UI","
### Pre-conditions:
- PostgreSQL app installed.
- Shell app installed.

### Steps:
- Login with valid credentials.
- Get Postgres Users.Postgres User Credentials[0].Uri from `output` API.
- Open Shell app.
- Run `psql {URI}` command in Shell app.

### Verify that:

- psql connection is successful.
"
"passed","Mon Sep 29 14:41:16 UTC 2025","Mon Sep 29 14:41:52 UTC 2025","35626","CLI Tests","CLI Storage","TestCLIStorage","","","Admin rename folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create new folder via **CLI**.

### Verify that:

- User can rename folder via **CLI**.
"
"passed","Mon Sep 29 15:24:26 UTC 2025","Mon Sep 29 15:25:18 UTC 2025","51761","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Invite not registered user to project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User **cannot** invite to project another user which is **not registered**.
"
"passed","Mon Sep 29 15:25:36 UTC 2025","Mon Sep 29 15:26:56 UTC 2025","80322","UI Tests","UI Secrets","TestUISecrets","","","Create Second Secret via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create Secret.

### Verify that:

- User can create second Secret.
"
"passed","Mon Sep 29 13:42:42 UTC 2025","Mon Sep 29 13:43:42 UTC 2025","59670","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Reader to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Reader` to `Writer` via **CLI**.
"
"passed","Mon Sep 29 15:08:27 UTC 2025","Mon Sep 29 15:09:35 UTC 2025","68624","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager cannot remove himself from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` **cannot** remove himself from organization.
"
"passed","Mon Sep 29 14:13:17 UTC 2025","Mon Sep 29 14:15:38 UTC 2025","140985","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify PostgreSQL client installation in Shell app via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Install Shell app.
- Open Shell app.
- Install `postgresql-client` in Shell app.

### Verify that:

- `postgresql-client` packet is installed successfully.
"
"passed","Mon Sep 29 14:53:33 UTC 2025","Mon Sep 29 14:54:25 UTC 2025","51350","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes himself from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` **cannot** remove `himself` from organization via **CLI**.
"
"passed","Mon Sep 29 14:37:29 UTC 2025","Mon Sep 29 14:38:20 UTC 2025","50565","UI Tests","UI Files","TestUIFiles","","","User download txt file","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `txt` file.

### Verify that:

- User can download `txt` file via UI.
- Downloaded `txt` file md5 hash matches expected file.
"
"passed","Mon Sep 29 13:55:53 UTC 2025","Mon Sep 29 13:57:17 UTC 2025","84123","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Manager to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can demote `Manager` to `Reader`.
"
"passed","Mon Sep 29 14:10:28 UTC 2025","Mon Sep 29 14:11:15 UTC 2025","47058","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify installed PostgreSQL app info displayed on the app container via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.

### Verify that:

- Label `Installed` is displayed on the PostgreSQL app container.
- `Show All` button displayed on the PostgreSQL app container.
"
"passed","Mon Sep 29 14:12:04 UTC 2025","Mon Sep 29 14:14:20 UTC 2025","135510","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager cannot change User role to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `User` role via **API**.

### Verify that:

- `Manager` **cannot** change user role from `User` to `Admin`.
"
"failed","Mon Sep 29 15:16:18 UTC 2025","Mon Sep 29 15:16:57 UTC 2025","39903","UI Tests","UI Project Structure Setup","TestUIProjectStructureSetup","","","Create second project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.

### Verify that:

- User can create second project in organization.
"
"passed","Mon Sep 29 14:56:31 UTC 2025","Mon Sep 29 14:57:29 UTC 2025","58039","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Create Second Organization via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User can create second organization.
"
"passed","Mon Sep 29 15:11:26 UTC 2025","Mon Sep 29 15:12:09 UTC 2025","43025","UI Tests","UI Disks","TestUIDisks","","","Create Second Disk via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new Disk.

### Verify that:

- User can create second Disk.
"
"passed","Mon Sep 29 14:32:05 UTC 2025","Mon Sep 29 14:33:46 UTC 2025","100958","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Admin can remove Manager from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can remove `Manager` from project.
"
"passed","Mon Sep 29 14:08:38 UTC 2025","Mon Sep 29 14:09:49 UTC 2025","71753","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Admin cannot demote himself to Manager","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Admin` role via **API**.

### Verify that:

- `Admin` cannot demote himself to `Manager`.
"
"passed","Mon Sep 29 14:46:08 UTC 2025","Mon Sep 29 14:46:38 UTC 2025","30175","CLI Tests","CLI Storage","TestCLIStorage","","","Admin rename text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can rename `txt` file via **CLI**.
"
"skipped","Mon Sep 29 13:54:59 UTC 2025","Mon Sep 29 13:54:59 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify User can reach DeepSeek app Details page from Installed Apps page","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.

### Verify that:

- `DeepSeek app Details` page displayed.
"
"passed","Mon Sep 29 13:49:58 UTC 2025","Mon Sep 29 13:50:39 UTC 2025","41391","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Manager to Admin in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Manager` to `Admin` via **CLI**.
"
"passed","Mon Sep 29 14:40:40 UTC 2025","Mon Sep 29 14:41:06 UTC 2025","26436","CLI Tests","CLI Storage","TestCLIStorage","","","Admin create folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can create folder via **CLI**.
"
"passed","Mon Sep 29 14:10:09 UTC 2025","Mon Sep 29 14:10:15 UTC 2025","6072","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify installed PostgreSQL app listed in Installed apps via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.

### Verify that:

- PostgreSQL app displayed in Installed Apps.
"
"passed","Mon Sep 29 14:45:33 UTC 2025","Mon Sep 29 14:46:00 UTC 2025","27661","CLI Tests","CLI Storage","TestCLIStorage","","","Admin download bin file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `bin` file via **CLI**.

### Verify that:

- User can download `bin` file via **CLI**.
- downloaded `bin` file md5 hash matches expected file.
"
"passed","Mon Sep 29 14:46:46 UTC 2025","Mon Sep 29 14:47:28 UTC 2025","41825","CLI Tests","CLI Storage","TestCLIStorage","","","Admin remove text file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Upload `text` file via **CLI**.

### Verify that:

- User can remove `txt` file via **CLI**.
"
"passed","Mon Sep 29 14:49:57 UTC 2025","Mon Sep 29 14:50:55 UTC 2025","57713","CLI Tests","CLI Organization Remove Members","TestCLIOrganizationRemoveMembers","","","Manager removes User from org via **CLI**","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Add `second user` to organization with `Manager` role via **CLI**.
- Add `third user` to organization with `User` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `User` from organization via **CLI**.
"
"passed","Mon Sep 29 14:32:02 UTC 2025","Mon Sep 29 14:33:00 UTC 2025","58147","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can remove `Reader` from project via **CLI**.
"
"passed","Mon Sep 29 15:18:26 UTC 2025","Mon Sep 29 15:19:00 UTC 2025","33689","CLI Tests","CLI Disks","TestCLIDisks","","","Admin create first disk via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Create new project via **API**.
- Login with Bearer auth token via **CLI**.

### Verify that:

- User can create disk via **CLI**.
"
"passed","Mon Sep 29 14:39:42 UTC 2025","Mon Sep 29 14:40:54 UTC 2025","72823","UI Tests","UI Files","TestUIFiles","","","User delete File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `txt` file.

### Verify that:

- User can delete a file with Delete button from File action bar.
"
"passed","Mon Sep 29 13:53:20 UTC 2025","Mon Sep 29 13:53:51 UTC 2025","31447","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin demote himself to Manager in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- `Admin` **cannot** demote himself via **CLI**.
"
"passed","Mon Sep 29 13:57:29 UTC 2025","Mon Sep 29 13:58:18 UTC 2025","48826","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Manager change member role from Writer to Reader in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.
- Add `third user` to project with `Writer` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Manager` can change project role from `Writer` to `Reader` via **CLI**.
"
"passed","Mon Sep 29 14:24:10 UTC 2025","Mon Sep 29 14:24:21 UTC 2025","10743","E2E Tests","Shell App","TestE2EShellApp","","","Open Shell application via UI","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.
- Get `external https` endpoint.

### Verify that:

- Shell app can be launched via UI.
"
"passed","Mon Sep 29 14:51:35 UTC 2025","Mon Sep 29 14:52:32 UTC 2025","56266","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User switch organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create second organization via **CLI**.

### Verify that:

- User can switch between organizations via **CLI**.
"
"passed","Mon Sep 29 14:42:00 UTC 2025","Mon Sep 29 14:42:35 UTC 2025","35056","CLI Tests","CLI Storage","TestCLIStorage","","","Admin remove folder via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create new folder via **CLI**.

### Verify that:

- User can remove folder via **CLI**.
"
"passed","Mon Sep 29 15:27:30 UTC 2025","Mon Sep 29 15:28:08 UTC 2025","38531","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin remove secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Create first secret via **CLI**.
- Create second secret via **CLI**.

### Verify that:

- User can remove second secret via **CLI**.
"
"failed","Mon Sep 29 15:15:37 UTC 2025","Mon Sep 29 15:16:13 UTC 2025","36136","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","Add user not in organization to project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User **cannot** add registered user **not from organization** to project via **CLI**.
"
"passed","Mon Sep 29 14:57:37 UTC 2025","Mon Sep 29 14:58:37 UTC 2025","60085","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Switch between organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create second organization via UI.

### Verify that:

- User can switch between organizations.
"
"passed","Mon Sep 29 15:29:18 UTC 2025","Mon Sep 29 15:31:00 UTC 2025","102101","UI Tests","UI Credits Purchase","TestUICreditsPurchase","","","Verify Manager can purchase organization credits with predefined value","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role.

### Verify that:

- `Manager` can purchase credits using predefined value(10, 100, 1000).
"
"passed","Mon Sep 29 15:25:56 UTC 2025","Mon Sep 29 15:26:33 UTC 2025","37211","CLI Tests","CLI Secrets","TestCLISecrets","","","Admin create first secret via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can create first secret via **CLI**.
"
"passed","Mon Sep 29 14:16:09 UTC 2025","Mon Sep 29 14:17:04 UTC 2025","54538","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify User can uninstall app via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.
- Click `Uninstall` button.

### Verify that:

- PostgreSQL app uninstalled.
"
"passed","Mon Sep 29 14:00:34 UTC 2025","Mon Sep 29 14:02:00 UTC 2025","86042","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Reader","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Reader`.
"
"passed","Mon Sep 29 14:37:38 UTC 2025","Mon Sep 29 14:38:32 UTC 2025","53638","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Writer removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Signup `third user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `third user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.
- Add `third user` to project with `Reader` role via **CLI**.
- `Second user` login with Bearer auth token via **CLI**.

### Verify that:

- `Writer` **cannot** remove members from project via **CLI**.
"
"passed","Mon Sep 29 15:05:27 UTC 2025","Mon Sep 29 15:06:30 UTC 2025","63818","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite registered user without organization to organization via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.

### Verify that:

- User can invite to organization another user that is registered but **doesn't have an organization**.
"
"skipped","Mon Sep 29 13:55:13 UTC 2025","Mon Sep 29 13:55:13 UTC 2025","0","E2E Tests","DeepSeek App","TestE2EDeepSeekApp","","","Verify app output contains required endpoints via UI","
### Pre-conditions:
- DeepSeek app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that `Output` section contains:
- Http OpenAI Compatible Chat API
- Https OpenAI Compatible Chat API
- Http OpenAI Compatible Embeddings API
- Https OpenAI Compatible Embeddings API
"
"passed","Mon Sep 29 15:26:35 UTC 2025","Mon Sep 29 15:26:42 UTC 2025","7331","CLI Tests","CLI Login","TestCLILogin","","","User without organization logs in with auth token via CLI","
- Login with valid credentials **via UI**.
- Get Bearer auth token from Playwright local storage.

### Verify that:

- User can login with Bearer auth token **via CLI**.
- Login output in CLI doesn't contain `organization` and `project`.
"
"passed","Mon Sep 29 14:27:20 UTC 2025","Mon Sep 29 14:28:05 UTC 2025","44900","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Reader from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Reader` role via **CLI**.

### Verify that:

- `Admin` can remove `Reader` from project via **CLI**.
"
"passed","Mon Sep 29 14:28:14 UTC 2025","Mon Sep 29 14:28:57 UTC 2025","43665","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Writer from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Writer` role via **CLI**.

### Verify that:

- `Admin` can remove `Writer` from project via **CLI**.
"
"passed","Mon Sep 29 15:31:15 UTC 2025","Mon Sep 29 15:32:33 UTC 2025","78214","UI Tests","UI Signup","TestUISignup","","","Invite not registered user to organization with default project via UI","
- Login with valid credentials.
- Create new organization.
- Create project with `default` option.
- Invite **not registered** user to organization.

### Verify that:

- Newly invited user automatically is member of default project.
"
"passed","Mon Sep 29 14:44:05 UTC 2025","Mon Sep 29 14:44:41 UTC 2025","35457","CLI Tests","CLI Storage","TestCLIStorage","","","Admin upload bin file via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.

### Verify that:

- User can upload `bin` file via **CLI**.
"
"passed","Mon Sep 29 13:59:05 UTC 2025","Mon Sep 29 14:00:26 UTC 2025","81859","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can promote Manager to Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.

### Verify that:

- `Admin` can promote `Manager` to `Admin`.
"
"passed","Mon Sep 29 15:10:28 UTC 2025","Mon Sep 29 15:11:03 UTC 2025","34992","CLI Tests","CLI Project Structure Setup","TestCLIProjectStructureSetup","","","User verifies admin get-projects command output via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Run `apolo admin get-projects` command via **CLI**.

### Verify that:

- Valid project info is displayed in command output.
"
"passed","Mon Sep 29 14:24:02 UTC 2025","Mon Sep 29 14:24:07 UTC 2025","5372","E2E Tests","Shell App","TestE2EShellApp","","","Verify app output endpoints schema via API","
### Pre-conditions:
- Shell app installed.

### Steps:
- Login with valid credentials.
- Call `output` API.

### Verify that:

- API endpoints data matching expected json schema.
"
"passed","Mon Sep 29 15:23:51 UTC 2025","Mon Sep 29 15:24:23 UTC 2025","32743","UI Tests","UI Secrets","TestUISecrets","","","Create First Secret without project via UI","
- Login with valid credentials.
- Create new organization via **API**.

### Verify that:

- User **cannot** create first Secret if **no project created** yet.
"
"passed","Mon Sep 29 14:35:18 UTC 2025","Mon Sep 29 14:36:17 UTC 2025","58767","UI Tests","UI Files","TestUIFiles","","","User make single click on File","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Upload `txt` file.
- Single click on file.

### Verify that:
- File info section appears.
- File action bar appears.
"
"passed","Mon Sep 29 14:12:15 UTC 2025","Mon Sep 29 14:12:22 UTC 2025","7282","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify PostgreSQL app details info via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click `Installed Apps` button.
- Click `Details` button on installed app container.

### Verify that:

- PostgreSQL app Details info is valid.
"
"passed","Mon Sep 29 14:14:27 UTC 2025","Mon Sep 29 14:16:38 UTC 2025","130282","UI Tests","UI Organization Change Member Roles","TestUIOrganizationChangeMemberRoles","","","Verify Manager can change Manager role to User","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Manager` role via **API**.

### Verify that:

- `Manager` can change user role from `Manager` to `User`.
- User after changing role from `Manager` to `User`:

- **Cannot** access organization `Settings`.
- **Cannot** access organization `Billing`.
"
"passed","Mon Sep 29 14:20:08 UTC 2025","Mon Sep 29 14:22:29 UTC 2025","140892","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Manager cannot demote Admin","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Admin` role.

### Verify that:

- `Manager` **cannot** demote `Admin` to `Manager`.
"
"passed","Mon Sep 29 14:49:14 UTC 2025","Mon Sep 29 14:49:53 UTC 2025","39261","CLI Tests","CLI Organization Structure Setup","TestCLIOrganizationStructureSetup","","","User removes organization via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Login with Bearer auth token via **CLI**.
- Create first organization via **CLI**.
- Create second organization via **CLI**.

### Verify that:

- User can remove organization via **CLI**.
"
"passed","Mon Sep 29 13:51:38 UTC 2025","Mon Sep 29 13:52:19 UTC 2025","40972","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin change member role from Admin to Writer in project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Admin` role via **CLI**.

### Verify that:

- `Admin` can change project role from `Admin` to `Writer` via **CLI**.
"
"passed","Mon Sep 29 14:39:24 UTC 2025","Mon Sep 29 14:42:06 UTC 2025","161983","UI Tests","UI Project Remove Members","TestUIProjectRemoveMembers","","","Verify Manager can remove Writer from project","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Manager` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Writer` role.

### Verify that:

- `Manager` can remove `Writer` from project.
"
"passed","Mon Sep 29 15:32:28 UTC 2025","Mon Sep 29 15:32:46 UTC 2025","17813","UI Tests","UI Login","TestUILogin","","","New user successful login","
### Verify that:

- User can login with valid credentials.
"
"passed","Mon Sep 29 14:24:27 UTC 2025","Mon Sep 29 14:25:42 UTC 2025","74623","UI Tests","UI Files","TestUIFiles","","","Verify Writer can create new folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.

### Verify that:

- `Writer` can create new folder.
"
"passed","Mon Sep 29 14:12:46 UTC 2025","Mon Sep 29 14:12:57 UTC 2025","10621","E2E Tests","PostgreSQL App","TestE2EPostgresApp","","","Verify app output user data schemas is valid via UI","
### Pre-conditions:
- PostgreSQL app installed.

### Steps:
- Login with valid credentials.
- Click Installed Apps.
- Click `Details` button on installed app container.
- Scroll to `Output` section.

### Verify that:
- User data sections data matching expected data format.
"
"passed","Mon Sep 29 14:02:08 UTC 2025","Mon Sep 29 14:03:29 UTC 2025","80403","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Admin can demote Admin to Writer","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Admin` role.

### Verify that:

- `Admin` can demote `Admin` to `Writer`.
"
"passed","Mon Sep 29 14:22:38 UTC 2025","Mon Sep 29 14:24:51 UTC 2025","133519","UI Tests","UI Project Change Member Roles","TestUIProjectChangeMemberRoles","","","Verify Writer cannot change member roles","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Signup `second user`.
- Invite `second user` to organization via **API**.
- Invite `second user` to project with `Writer` role.
- Signup `third user`.
- Invite `third user` to organization via **API**.
- Invite `third user` to project with `Reader` role.

### Verify that:

- `Writer` **cannot** change member roles.
"
"passed","Mon Sep 29 14:29:06 UTC 2025","Mon Sep 29 14:29:59 UTC 2025","52948","CLI Tests","CLI Project Remove Members","TestCLIProjectStructureSetup","","","Admin removes Manager from project via CLI","
- Login with valid credentials via **UI**.
- Get Bearer auth token from Playwright local storage.
- Create new organization via **API**.
- Signup `second user` via **UI**.
- Login with Bearer auth token via **CLI**.
- Create new project via **CLI**.
- Add `second user` to organization via **CLI**.
- Add `second user` to project with `Manager` role via **CLI**.

### Verify that:

- `Admin` can remove `Manager` from project via **CLI**.
"
"passed","Mon Sep 29 15:06:09 UTC 2025","Mon Sep 29 15:08:17 UTC 2025","127134","UI Tests","UI Organization Remove Members","TestUIOrganizationRemoveMembers","","","Verify Manager cannot remove Admin from organization","
- Login with valid credentials.
- Create new organization via **API**.
- Signup `second user`.
- Invite `second user` to organization with `Manager` role via **API**.
- Signup `third user`.
- Invite `third user` to organization with `Admin` role via **API**.

### Verify that:

- `Manager` **cannot** remove another `Admin` from organization.
"
"passed","Mon Sep 29 15:29:49 UTC 2025","Mon Sep 29 15:31:05 UTC 2025","76064","UI Tests","UI Signup","TestUISignup","","","Invite not registered user as user to organization","
- Login with valid credentials.
- Create new organization.

### Verify that:

- User can invite **not registered** user to organization.
"
"passed","Mon Sep 29 15:06:39 UTC 2025","Mon Sep 29 15:07:50 UTC 2025","70814","UI Tests","UI Organization Structure Setup","TestUIOrganizationStructureSetup","","","Invite registered user without organization to organization with default project via UI","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project with `default` option.
- Signup `second user`.

### Verify that:

- User can invite to organization another user that is registered but **doesn't have organization**.
- Newly invited user is member of the `default` project.
"
"passed","Mon Sep 29 14:29:50 UTC 2025","Mon Sep 29 14:30:45 UTC 2025","54847","UI Tests","UI Files","TestUIFiles","","","User make double click on Folder","
- Login with valid credentials.
- Create new organization via **API**.
- Create new project.
- Create new folder.

### Verify that:

- User opens a folder with a double click on it.
"
