name: PR Tests Run Workflow

on:
  pull_request:
    branches: [ master ]

permissions:
  pull-requests: write
  contents: write
  pages: write

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout commit
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Sync
        run: uv sync
      - name: Run pre-commit
        run: |
          echo "Actor is: ${{ github.actor }}"
          echo "::add-matcher::.github/actionlint-matcher.json"
          uv run pre-commit run --all-files

  mypy:
    name: Mypy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout commit
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Sync
        run: uv sync
      - name: Mypy
        run: |
          uv run mypy

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Set destination directory
        id: set-destination
        run: echo "DEST=run-$(date +'%Y-%m-%d')-${{ github.run_number }}" >> "$GITHUB_ENV"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Find changed test files
        id: changed-tests
        run: |
          git fetch origin master
          TEST_FILES=$(git diff --name-only origin/master | grep '^tests/test_cases/tests_[^/]*/test_.*\.py$' || true)
          echo "Changed test files:"
          echo "$TEST_FILES"
          echo "files=$(echo "$TEST_FILES" | tr '\n' ' ' | xargs)" >> $GITHUB_OUTPUT

      - name: Set no_tests=true if no test files changed
        id: check-no-tests
        run: |
          if [[ "${{ steps.changed-tests.outputs.files }}" == "" ]]; then
            echo "‚úÖ No relevant test files changed. Skipping test run."
            echo "no_tests=true" >> $GITHUB_OUTPUT
          else
            echo "no_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check-no-tests.outputs.no_tests == 'false'
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version

      - name: Install uv
        if: steps.check-no-tests.outputs.no_tests == 'false'
        uses: astral-sh/setup-uv@v6

      - name: Install Playwright browsers
        if: steps.check-no-tests.outputs.no_tests == 'false'
        run: uv run python -m playwright install --with-deps

      - name: Install Allure
        if: steps.check-no-tests.outputs.no_tests == 'false'
        run: |
          mkdir -p allure-bin
          curl -sSL -o allure.zip https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.zip
          unzip -q allure.zip -d allure-bin
          echo "$PWD/allure-bin/allure-2.27.0/bin" >> $GITHUB_PATH
          export PATH="$PWD/allure-bin/allure-2.27.0/bin:$PATH"
          allure --version

      - name: Run pytest on changed test files
        if: steps.check-no-tests.outputs.no_tests == 'false'
        id: run_tests
        run: |
          FILES="${{ steps.changed-tests.outputs.files }}"
          echo "Running pytest on:"
          echo "$FILES"
          set +e
          uv run pytest $FILES --tb=short --capture=tee-sys
          exit_code=${PIPESTATUS[0]}
          exit $exit_code

      - name: Read test summary
        if: always()
        id: summary
        env:
          NO_TESTS: ${{ steps.check-no-tests.outputs.no_tests }}
        run: |
          if [[ "$NO_TESTS" == "true" ]]; then
            {
              echo "summary_text<<EOF"
              echo "‚úÖ No tests were affected by this change."
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            {
              echo "summary_text<<EOF"
              cat reports/logs/summary.log || echo "No summary found"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi

      - name: Deploy to GitHub Pages
        if: steps.check-no-tests.outputs.no_tests == 'false' && always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports/allure-report
          publish_branch: gh-pages
          destination_dir: ${{ env.DEST }}

      - name: Wait for GitHub Pages to become available
        if: steps.check-no-tests.outputs.no_tests == 'false'
        run: |
          URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ env.DEST }}/index.html"
          echo "Waiting for: $URL"

          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            echo "Attempt $i: HTTP $STATUS"
            if [ "$STATUS" = "200" ]; then
              echo "‚úÖ Page is live."
              exit 0
            fi
            sleep 30
          done

      - name: Comment on PR with Allure Report
        if: always()
        uses: actions/github-script@v7
        env:
          SUMMARY_TEXT: ${{ steps.summary.outputs.summary_text }}
          DEST: ${{ env.DEST }}
          NO_TESTS: ${{ steps.check-no-tests.outputs.no_tests }}
          test_outcome: ${{ steps.run_tests.outcome }}
        with:
          script: |
            const pr = context.payload.pull_request;
            const runNumber = context.runNumber;
            const summary = process.env.SUMMARY_TEXT;
            const noTests = process.env.NO_TESTS === "true";
            const testOutcome = process.env.test_outcome || "success";
            const url = `https://${context.repo.owner}.github.io/${context.repo.repo}/${process.env.DEST}/index.html`;

            const statusEmoji = noTests ? "‚úÖ" : (testOutcome === "success" ? "‚úÖ" : "‚ùå");
            const statusText = noTests ? "skipped (no tests)" : (testOutcome === "success" ? "complete" : "failed");

            const commentLines = [
              `${statusEmoji} **Test run #${runNumber} ${statusText}**`,
            ];

            if (!noTests) {
              commentLines.push(`üìä **Allure Report:** [View Report](${url})`);
            }

            commentLines.push("");
            commentLines.push(`üìù **Summary:**\n\`\`\`\n${summary.trim()}\n\`\`\``);

            const comment = commentLines.join("\n");

            github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Clean test artifacts to save space
        if: always()
        run: rm -rf reports/logs reports/screenshots reports/allure-results

      - name: Fail if tests failed
        if: steps.check-no-tests.outputs.no_tests == 'false' && steps.run_tests.outcome != 'success'
        run: exit 1

  check:
    name: Check
    needs:
      - pre-commit
      - mypy
      - run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Validate job results
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  approve:
    name: Approve bot PR
    runs-on: ubuntu-latest
    if: endsWith(github.actor, '-bot') || endsWith(github.actor, 'bot') || endsWith(github.actor, '[bot]')
    needs: check
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: metadata
        id: metadata
        if: github.actor == 'dependabot[bot]'
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge for bot PRs
        run: gh pr merge --auto --squash --delete-branch "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
