name: PR Tests Run Workflow

on:
  pull_request:
    branches: [ master ]

permissions:
  pull-requests: write
  contents: write

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout commit
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Sync
        run: uv sync
      - name: Run pre-commit
        run: |
          echo "::add-matcher::.github/actionlint-matcher.json"
          uv run pre-commit run --all-files

  mypy:
      name: Mypy
      runs-on: ubuntu-latest
      timeout-minutes: 10
      steps:
        - name: Checkout commit
          uses: actions/checkout@v4
        - name: Install Python
          uses: actions/setup-python@v5
          with:
            python-version-file: .python-version
        - name: Install uv
          uses: astral-sh/setup-uv@v6
          with:
            enable-cache: true
        - name: Sync
          run: uv sync
        - name: Mypy
          run: |
            uv run mypy


  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Set destination directory
        id: set-destination
        run: |
            echo "DEST=run-$(date +'%Y-%m-%d')-${{ github.run_number }}" >> "$GITHUB_ENV"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install Playwright browsers
        run: uv run python -m playwright install --with-deps

      - name: Install Allure
        run: |
          mkdir -p allure-bin
          curl -sSL -o allure.zip https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.zip
          unzip -q allure.zip -d allure-bin
          echo "$PWD/allure-bin/allure-2.27.0/bin" >> $GITHUB_PATH
          export PATH="$PWD/allure-bin/allure-2.27.0/bin:$PATH"
          allure --version

      - name: Download .testmondata from testmon-cache
        run: |
          git fetch origin testmon-cache
          git checkout origin/testmon-cache -- .testmondata || echo "No testmondata found"

      - name: Run tests
        id: run_tests
        continue-on-error: true
        run: uv run pytest tests -n 3 --testmon

      - name: Read test summary
        if: always()
        id: summary
        run: |
          echo "summary_text<<EOF" >> $GITHUB_OUTPUT
          cat reports/logs/summary.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports/allure-report
          publish_branch: gh-pages
          destination_dir: ${{ env.DEST }}

      - name: Comment on PR with Allure Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          SUMMARY_TEXT: ${{ steps.summary.outputs.summary_text }}
          DEST: ${{ env.DEST }}
        with:
          script: |
            const pr = context.payload.pull_request;
            const runNumber = context.runNumber;
            const url = `https://${context.repo.owner}.github.io/${context.repo.repo}/${process.env.DEST}/index.html`;
            const summary = process.env.SUMMARY_TEXT;
            const success = "${{ steps.run_tests.outcome }}" === "success";
            const statusEmoji = success ? "‚úÖ" : "‚ùå";
            const statusText = success ? "complete" : "failed";

            const comment = [
              `${statusEmoji} **Test run #${runNumber} ${statusText}**`,
              `üìä **Allure Report:** [View Report](${url})`,
              ``,
              `üìù **Summary:**\n\`\`\`\n${summary.trim()}\n\`\`\``
            ].join('\n');

            github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail job if tests failed
        if: steps.run_tests.outcome != 'success'
        run: exit 1


  check:
    name: Check
    needs:
      - pre-commit
      - mypy
      - run-tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
